[1mdiff --git a/ASACBackEnd/.coveragerc b/ASACBackEnd/.coveragerc[m
[1mindex ee2c680..e577e06 100644[m
[1m--- a/ASACBackEnd/.coveragerc[m
[1m+++ b/ASACBackEnd/.coveragerc[m
[36m@@ -5,7 +5,7 @@[m [momit =[m
     */tests/*[m
     *__init__.py[m
     *manage.py[m
[31m-    # */settings.py[m
[32m+[m[32m    */settings.py[m
     # */asgi.py[m
     # */wsgi.py[m
 [m
[1mdiff --git a/ASACBackEnd/ASACBackEnd/settings.py b/ASACBackEnd/ASACBackEnd/settings.py[m
[1mindex 6b30439..cb7bc18 100644[m
[1m--- a/ASACBackEnd/ASACBackEnd/settings.py[m
[1m+++ b/ASACBackEnd/ASACBackEnd/settings.py[m
[36m@@ -16,13 +16,13 @@[m [mimport channels[m
 from corsheaders.defaults import default_headers[m
 [m
 [m
[31m-if 'test' in sys.argv or 'pytest' in sys.argv:[m
[31m-    DATABASES = {[m
[31m-        'default': {[m
[31m-            'ENGINE': 'django.db.backends.sqlite3',[m
[31m-            'NAME': ':memory:',[m
[31m-        }[m
[31m-    }[m
[32m+[m[32m#if 'test' in sys.argv or 'pytest' in sys.argv:[m
[32m+[m[32m#    DATABASES = {[m
[32m+[m[32m#        'default': {[m
[32m+[m[32m#            'ENGINE': 'django.db.backends.sqlite3',[m
[32m+[m[32m#            'NAME': ':memory:',[m
[32m+[m[32m#        }[m
[32m+[m[32m#    }[m
 [m
 # Build paths inside the project like this: BASE_DIR / 'subdir'.[m
 BASE_DIR = Path(__file__).resolve().parent.parent[m
[36m@@ -124,24 +124,25 @@[m [mCHANNEL_LAYERS = {[m
 # Database[m
 # https://docs.djangoproject.com/en/4.1/ref/settings/#databases[m
 [m
[31m-DATABASES = {[m
[31m-    'default': {[m
[31m-        'ENGINE': 'django.db.backends.postgresql',[m
[31m-        'NAME': 'asacbackenddb',[m
[31m-        'USER': 'xez1',[m
[31m-        'PASSWORD': 'g9hgim5A!!!',[m
[31m-        'HOST': 'localhost',[m
[31m-        'PORT': '',[m
[32m+[m[32m# Database configuration[m
[32m+[m[32mif DEBUG:[m
[32m+[m[32m    DATABASES = {[m
[32m+[m[32m        'default': {[m
[32m+[m[32m            'ENGINE': 'django.db.backends.sqlite3',[m
[32m+[m[32m            'NAME': BASE_DIR / 'db.sqlite3',[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
[32m+[m[32melse:[m
[32m+[m[32m    DATABASES = {[m
[32m+[m[32m        'default': {[m
[32m+[m[32m            'ENGINE': 'django.db.backends.postgresql',[m
[32m+[m[32m            'NAME': 'asacbackenddb',[m
[32m+[m[32m            'USER': 'xez1',[m
[32m+[m[32m            'PASSWORD': 'g9hgim5A!!!',[m
[32m+[m[32m            'HOST': 'localhost',[m
[32m+[m[32m            'PORT': '',  # Set to empty string for default PostgreSQL port[m
[32m+[m[32m        }[m
     }[m
[31m-}[m
[31m-[m
[31m-# DATABASES = {[m
[31m-#     'default': {[m
[31m-#         'ENGINE': 'django.db.backends.sqlite3',[m
[31m-#         'NAME': BASE_DIR / 'db.sqlite3',[m
[31m-#     }[m
[31m-# }[m
[31m-[m
 [m
 # Password validation[m
 # https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators[m
[1mdiff --git a/ASACBackEnd/ASACBackEnd/tests/test_settings.py b/ASACBackEnd/ASACBackEnd/tests/test_settings.py[m
[1mindex a06d016..531dc5f 100644[m
[1m--- a/ASACBackEnd/ASACBackEnd/tests/test_settings.py[m
[1m+++ b/ASACBackEnd/ASACBackEnd/tests/test_settings.py[m
[36m@@ -1,42 +1,21 @@[m
[32m+[m[32mimport pytest[m
 from django.test import TestCase, SimpleTestCase, override_settings[m
[31m-from django.conf import settings[m
[31m-from unittest.mock import patch[m
[31m-import os[m
[32m+[m[32mfrom .. import settings[m
 [m
 [m
 class TestEnvironmentSettings(SimpleTestCase):[m
 [m
[31m-    def test_debug_mode(self):[m
[31m-        """ Test if DEBUG is set correctly based on environment. """[m
[31m-        expected_debug = False  # Change based on your env setup logic[m
[31m-        self.assertEqual(settings.DEBUG, expected_debug)[m
 [m
     def test_database_configuration(self):[m
         """ Ensure database configurations are loaded based on environment. """[m
[32m+[m[32m        print(settings.DEBUG)[m
         if settings.DEBUG:[m
[31m-            self.assertIn('sqlite3', settings.DATABASES['default']['ENGINE'])[m
[31m-        else:[m
[31m-            self.assertIn('sqlite3', settings.DATABASES['default']['ENGINE'])  # Change to postgressql LATER!![m
[31m-[m
[31m-[m
[31m-class TestDatabaseConfig(TestCase):[m
[31m-[m
[31m-    @patch('sys.argv', ['manage.py', 'test'])[m
[31m-    def test_database_config_for_tests(self):[m
[31m-        """ Test that DATABASES setting is configured for tests """[m
[31m-        with override_settings():[m
[31m-            from django.conf import settings[m
[31m-            settings._setup()[m
             self.assertEqual(settings.DATABASES['default']['ENGINE'], 'django.db.backends.sqlite3')[m
[31m-            self.assertTrue("memory" in settings.DATABASES['default']['NAME'])[m
[31m-[m
[31m-    @patch('sys.argv', ['manage.py', 'runserver'])[m
[31m-    def test_database_config_for_development(self):[m
[31m-        """ Test that DATABASES setting is configured for development """[m
[31m-        with override_settings():[m
[31m-            from django.conf import settings[m
[31m-            settings._setup()[m
[31m-            self.assertNotEqual(settings.DATABASES['default']['NAME'], ':memory:')[m
[32m+[m[32m            print(str(settings.DATABASES['default']['NAME']))[m
[32m+[m[32m            self.assertTrue("memory" in str(settings.DATABASES['default']['NAME']))[m
[32m+[m[32m        else:[m
[32m+[m[32m            self.assertEqual(settings.DATABASES['default']['ENGINE'], 'django.db.backends.postgresql')[m
[32m+[m[32m            self.assertTrue("asacbackenddb" in str(settings.DATABASES['default']['NAME']))[m
 [m
 [m
 class TestInstalledAppsAndMiddleware(SimpleTestCase):[m
[36m@@ -58,11 +37,10 @@[m [mclass TestSecuritySettings(SimpleTestCase):[m
 [m
     def test_secret_key(self):[m
         """ Check that the secret key is set and not default in production. """[m
[31m-        if not settings.DEBUG:[m
[31m-            pass[m
[31m-            # self.assertNotEqual(settings.SECRET_KEY, 'django-insecure-sd*6c$qhzhfw7k#ncii@3nnzxco@k&+n%fq0_=ze5hg7+j9k(z')[m
[32m+[m[32m        if settings.DEBUG:[m
[32m+[m[32m            self.assertTrue(settings.SECRET_KEY == 'django-insecure-sd*6c$qhzhfw7k#ncii@3nnzxco@k&+n%fq0_=ze5hg7+j9k(z')[m
         else:[m
[31m-            self.skipTest("Secret Key test is not applicable in debug mode.")[m
[32m+[m[32m            self.assertFalse(settings.SECRET_KEY == 'django-insecure-sd*6c$qhzhfw7k#ncii@3nnzxco@k&+n%fq0_=ze5hg7+j9k(z')[m
 [m
     def test_cors_settings(self):[m
         """ Test CORS headers configuration. """[m
[1mdiff --git a/ASACBackEnd/Accounts/models.py b/ASACBackEnd/Accounts/models.py[m
[1mindex f24283c..78dacc4 100644[m
[1m--- a/ASACBackEnd/Accounts/models.py[m
[1m+++ b/ASACBackEnd/Accounts/models.py[m
[36m@@ -13,7 +13,8 @@[m [mclass User(AbstractUser):[m
         validators=[RegexValidator([m
             regex=r'^(?=.*[a-zA-Z]{3,}).*$',[m
             message='Username must contain at least 3 alphabetical characters'[m
[31m-        )][m
[32m+[m[32m        )],[m
[32m+[m[32m        blank = False[m
     )[m
     first_name = models.CharField([m
         max_length=15,[m
[1mdiff --git a/ASACBackEnd/Accounts/tests/test_models.py b/ASACBackEnd/Accounts/tests/test_models.py[m
[1mindex e69de29..a3f39a9 100644[m
[1m--- a/ASACBackEnd/Accounts/tests/test_models.py[m
[1m+++ b/ASACBackEnd/Accounts/tests/test_models.py[m
[36m@@ -0,0 +1,77 @@[m
[32m+[m[32mfrom django.test import TestCase[m
[32m+[m[32mfrom django.core.exceptions import ValidationError[m
[32m+[m[32mfrom django.db.utils import IntegrityError[m
[32m+[m[32mfrom ..models import User, AuthenticationPushToken[m
[32m+[m[32mimport pytest[m
[32m+[m
[32m+[m
[32m+[m[32mclass UserModelTest(TestCase):[m
[32m+[m
[32m+[m[32m    @classmethod[m
[32m+[m[32m    def setUpTestData(self):[m
[32m+[m[32m        self.user = User.objects.create_user([m
[32m+[m[32m            username='testuser',[m
[32m+[m[32m            first_name='test',[m
[32m+[m[32m            last_name='user',[m
[32m+[m[32m            email='testuser@kcl.ac.uk',[m
[32m+[m[32m            password='123456789A!'[m
[32m+[m[32m        )[m
[32m+[m
[32m+[m[32m    def test_user_field_attributes(self):[m
[32m+[m[32m        self.assertEqual(self.user._meta.get_field('username').max_length, 15)[m
[32m+[m[32m        self.assertEqual(self.user._meta.get_field('first_name').max_length, 15)[m
[32m+[m[32m        self.assertEqual(self.user._meta.get_field('last_name').max_length, 15)[m
[32m+[m[32m        self.assertEqual(self.user._meta.get_field('email').max_length, 35)[m
[32m+[m[32m        self.assertTrue(self.user._meta.get_field('username').unique)[m
[32m+[m[32m        self.assertTrue(self.user._meta.get_field('email').unique)[m
[32m+[m[32m        self.assertFalse(self.user._meta.get_field('username').blank)[m
[32m+[m[32m        self.assertFalse(self.user._meta.get_field('first_name').blank)[m
[32m+[m[32m        self.assertFalse(self.user._meta.get_field('last_name').blank)[m
[32m+[m[32m        self.assertFalse(self.user._meta.get_field('email').blank)[m
[32m+[m
[32m+[m[32m    def test_user_username_validator(self):[m
[32m+[m[32m        with self.assertRaises(ValidationError):[m
[32m+[m[32m            user = User(username='ab', first_name='Jane', last_name='Doe', email='janedoe@example.com')[m
[32m+[m[32m            user.full_clean()[m
[32m+[m
[32m+[m[32m    def test_paying_user_default(self):[m
[32m+[m[32m        self.assertFalse(self.user.paying_user)[m
[32m+[m
[32m+[m[32m    def test_user_unique_email(self):[m
[32m+[m[32m        with self.assertRaises(IntegrityError):[m
[32m+[m[32m            User.objects.create(username='uniqueuser456', first_name='Alice', last_name='Smith',[m
[32m+[m[32m                                email='testuser@kcl.ac.uk')[m
[32m+[m
[32m+[m[32m    def test_user_string_representation(self):[m
[32m+[m[32m        self.assertEqual(str(self.user), self.user.username)[m
[32m+[m
[32m+[m
[32m+[m[32mclass AuthenticationPushTokenModelTest(TestCase):[m
[32m+[m
[32m+[m[32m    @classmethod[m
[32m+[m[32m    def setUpTestData(self):[m
[32m+[m[32m        self.user = User.objects.create_user([m
[32m+[m[32m            username='testuser',[m
[32m+[m[32m            first_name='test',[m
[32m+[m[32m            last_name='user',[m
[32m+[m[32m            email='testuser@kcl.ac.uk',[m
[32m+[m[32m            password='123456789A!'[m
[32m+[m[32m        )[m
[32m+[m[32m        self.auth_token = AuthenticationPushToken.objects.create([m
[32m+[m[32m            user=self.user,[m
[32m+[m[32m            token='ExponentPushToken[dummy_token]'[m
[32m+[m[32m        )[m
[32m+[m
[32m+[m[32m    def test_token_fields(self):[m
[32m+[m[32m        self.assertEqual(self.auth_token._meta.get_field('token').max_length, 200)[m
[32m+[m[32m        self.assertTrue(self.auth_token._meta.get_field('token').unique)[m
[32m+[m
[32m+[m[32m    def test_related_name(self):[m
[32m+[m[32m        self.assertEqual(self.user.authorisation_tokens, self.auth_token)[m
[32m+[m
[32m+[m[32m    def test_token_string_representation(self):[m
[32m+[m[32m        expected_string = f"{self.user.username} - {self.auth_token.token}"[m
[32m+[m[32m        self.assertEqual(str(self.auth_token), expected_string)[m
[32m+[m
[32m+[m[32m    def test_token_auto_creation_timestamp(self):[m
[32m+[m[32m        self.assertIsNotNone(self.auth_token.created_at)[m
