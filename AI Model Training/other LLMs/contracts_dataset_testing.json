[
    {nParties
        "smart_contract": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\"; // Interface for ERC20 tokens\\nimport \"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\"; // Prevent re-entrancy attacks\\n\\ncontract EmploymentContract is ReentrancyGuard {\\n    address public employer;\\n    address public employee = 0x1aBcdeF0123456789AbCdeF0123456789AbCdeF0;\\n    address private authorizedApp; // Address of the authorized app to update metrics\\n    uint256 public salary = 10000; // Monthly salary amount in USDC ($120,000 USD per annum)\\n    IERC20 private usdcToken; // USDC token contract interface\\n    uint256 public startDate = 1764547200; // Unix timestamp of Mon Dec 01 2025 00:00:00 GMT+0000 (Greenwich Mean Time)\\n    uint256 public terminationDate = 1859155200; // Unix timestamp of Thu Nov 30 2028 00:00:00 GMT+0000 (Greenwich Mean Time)\\n    uint256 public lastSalaryPaidDate; // Tracks last salary payment date\\n    uint256 public performanceScore = 0; // Performance score, updated by the authorized app\\n    uint256 public performanceThreshold = 0; // Performance score, updated by the authorized app\\n    bool public isEmployed = true; // Employment status\\n    string public salaryType = 'bi-weekly'; // How often a salary payment to be initiated\\n    \\n    event SalaryUpdated(uint256 newSalary);\\n    event BonusPaid(uint256 bonusAmount);\\n    event EmploymentTerminated(string message);\\n    event DisputeResolved(string message);\\n    event SalaryPaid(uint256 amount);\\n    event PerformanceScoreUpdated(uint256 score);\\n    event PerformanceThresholdUpdated(uint256 threshold);\\n    event TerminationDateUpdated(uint256 newTerminationDate);\\n\\n    modifier onlyAuthorizedApp() {\\n        require(msg.sender == authorizedApp, \"Caller is not the authorized app\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _authorizedApp,\\n        address _usdcTokenAddress\\n    ) {\\n        employer = msg.sender; // The address deploying the contract is the employer\\n        authorizedApp = _authorizedApp;\\n        usdcToken = IERC20(_usdcTokenAddress);\\n        lastSalaryPaidDate = startDate; // Initialize with start date\\n    }\\n\\n    // Function to deposit USDC into the contract for salary payments\\n    function depositSalaryFunds(uint256 _amount) external nonReentrant {\\n        require(msg.sender == employer, \"Only the employer can deposit funds\");\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Function to automatically withdraw monthly salary funds from the employer\\n    function monthlyFunding() external onlyAuthorizedApp nonReentrant {\\n        uint256 amountNeeded = salary * 3; // Ensure buffer for 3 months\\n        uint256 currentBalance = usdcToken.balanceOf(address(this));\\n        uint256 shortfall = 0;\\n\\n        if (currentBalance < amountNeeded) {\\n            shortfall = amountNeeded - currentBalance;\\n            // Attempt to transfer the shortfall from the employer to the contract\\n            usdcToken.transferFrom(employer, address(this), shortfall);\\n        }\\n    }\\n\\n    // Automatically pay salary on a monthly basis\\n    function autoPaySalary() external onlyAuthorizedApp nonReentrant {\\n        require(isEmployed, \"Employment has ended\");\\n        require(block.timestamp >= lastSalaryPaidDate + 14 days, \"Salary already paid for this period\");\\n        require(usdcToken.balanceOf(address(this)) >= salary, \"Insufficient funds in contract\");\\n        require(performanceScore >= performanceThreshold, \"Performance score does not meet the required threshold. Employee is underperforming\");\\n\\n        lastSalaryPaidDate += 14 days; // Update last salary paid date to current month\\n        usdcToken.transfer(employee, salary / 2.2); // Since there are 4.4 weeks in a months and the pay is bi-weekly\\n        emit SalaryPaid(salary);\\n    }\\n\\n    // Update performance score\\n    function updatePerformanceScore(uint256 _newScore) external onlyAuthorizedApp {\\n        performanceScore = _newScore;\\n        emit PerformanceScoreUpdated(_newScore);\\n    }\\n\\n    function updatePerformanceThreshold(uint256 _threshold) external onlyAuthorizedApp {\\n        performanceThreshold = _threshold;\\n        emit PerformanceThresholdUpdated(_threshold);\\n    }\\n\\n    // Extend employment termination date\\n    function extendTerminationDate(uint256 _newTerminationDate) external onlyAuthorizedApp {\\n        require(_newTerminationDate > terminationDate, \"New date must be after current termination date\");\\n        terminationDate = _newTerminationDate;\\n        emit TerminationDateUpdated(_newTerminationDate);\\n    }\\n\\n    // Update salary\\n    function updateSalary(uint256 _newSalary) external onlyAuthorizedApp {\\n        salary = _newSalary;\\n        emit SalaryUpdated(_newSalary);\\n    }\\n\\n    // Pay bonus\\n    function payBonus(uint256 _bonusAmount) external onlyAuthorizedApp nonReentrant {\\n        require(usdcToken.balanceOf(address(this)) >= _bonusAmount, \"Insufficient funds in contract\");\\n        usdcToken.transfer(employee, _bonusAmount);\\n        emit BonusPaid(_bonusAmount);\\n    }\\n\\n    // Terminate employment with mutual agreement or trigger dispute resolution if disagreement\\n    function terminateEmployment(bool employeePermission, bool employerPermission, bool employerFault) external onlyAuthorizedApp {\\n        if (employeePermission && employerPermission) {\\n            // If both parties agree, terminate employment and notify\\n            isEmployed = false;\\n            emit EmploymentTerminated(\"Employment terminated by mutual agreement.\");\\n        } else {\\n            // If there is no mutual agreement, determine who does not agree and resolve the dispute\\n            _resolveDispute(employerFault);\\n        }\\n    }\\n\\n    // Function to check contract balance (for employer's view)\\n    function checkContractBalance() external view returns (uint256) {\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    // Additional function to handle disputes and protect the salary buffer\\n    function _resolveDispute(bool employerFault) internal {\\n        uint256 contractBalance = usdcToken.balanceOf(address(this));\\n        address recipient = employerFault ? employee : employer;\\n        usdcToken.transfer(recipient, contractBalance);\\n\\n        isEmployed = false;\\n\\n        string memory resolutionMessage = employerFault \\n            ? \"Employer at fault, funds transferred to employee.\" \\n            : \"Employee at fault, funds transferred to employer.\";\\n        emit DisputeResolved(resolutionMessage);\\n        emit EmploymentTerminated(\"Employment terminated due to dispute resolution.\");\\n    }\\n\\n    // External interface for dispute resolution, callable by authorized app\\n    function resolveDispute(bool employerFault) external onlyAuthorizedApp {\\n        _resolveDispute(employerFault);\\n    }\\n}\\n",
        "legal_contract": "Full-Time Employment Agreement\\nParties:\\nThis Full-Time Employment Agreement (\"Agreement\") is entered into between:\\nTechGenius Innovations Inc., a corporation organized and existing under the laws of California, with its principal place of business located at 789 Innovation Boulevard, San Francisco, CA 94105 (hereinafter referred to as the \"Company\"),\\nand\\nIsabella Thompson, an individual employed under the laws of California, with a residential address at 456 Maple Lane, Los Angeles, CA 90001 (hereinafter referred to as the \"Employee\").\\nPosition and Duties:\\nThe Company hereby employs the Employee in the position of Senior Software Developer on a full-time basis. The Employee agrees to design, develop, and maintain software solutions to meet the needs of the Company and its clients.\\nTerm of Employment:\\nThe employment under this Agreement shall commence on December 1, 2025, and shall continue until terminated by either party in accordance with the terms herein. The initial term of employment shall be three years, terminating on November 30, 2028.\\nSalary:\\nThe Company agrees to pay the Employee a salary of $120,000 USD per annum. Salary payments will be made on a bi-weekly basis, with the first payment occurring on December 15, 2025. The Employee's salary will be subject to applicable withholdings and deductions.\\nBenefits:\\nIn addition to the salary, the Employee shall be entitled to participate in the Company's employee benefits program, including health insurance, dental coverage, and a 401(k) retirement savings plan with employer matching.\\nPerformance Review:\\nThe Employee's performance will be reviewed semi-annually by the Company's management team. Performance evaluations may result in salary increases, bonuses, or other forms of recognition for outstanding contributions.\\nTermination:\\nEither party may terminate this Agreement at any time, with or without cause, upon providing written notice to the other party. The notice period for termination shall be 30 days. Upon termination, the Employee shall be entitled to receive any accrued but unpaid salary up to the termination date.\\nConfidentiality:\\nThe Employee agrees to maintain strict confidentiality regarding all proprietary information of the Company, both during and after the term of employment.\\nUSDC Wallet Address:\\nThe Company agrees to pay the Employee's salary in USDC tokens to the following wallet address: 0x1aBcdeF0123456789AbCdeF0123456789AbCdeF0\\nGoverning Law:\\nThis Agreement shall be governed by and construed in accordance with the laws of the State of California.\\nEntire Agreement:\\nThis Agreement constitutes the entire understanding between the parties concerning the subject matter hereof and supersedes all prior agreements and understandings, whether written or oral.\\nIN WITNESS WHEREOF, the parties hereto have executed this Agreement as of the date first above written.\\nTechGenius Innovations Inc.\\nBy: Ethan Cooper\\nName: Ethan Cooper\\nTitle: Chief Executive Officer\\nDate: December 1, 2025\\nIsabella Thompson\\nBy: Isabella Thompson\\nName: Isabella Thompson\\nDate: December 1, 2025\\n"
    },
    {
        "smart_contract": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\"; // Interface for ERC20 tokens\\nimport \"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\"; // Prevent re-entrancy attacks\\n\\ncontract EmploymentContract is ReentrancyGuard {\\n    address public employer;\\n    address public employee = 0x8932aa60a7b5efefa8ec3ee899fd238d029d10c6;\\n    address private authorizedApp; // Address of the authorized app to update metrics\\n    uint256 public salary = 8333; // Monthly salary amount in USDC ($100,000 USD per annum)\\n    IERC20 private usdcToken; // USDC token contract interface\\n    uint256 public startDate = 1767225600; // Unix timestamp of Thu Jan 01 2026 00:00:00 GMT+0000 (Greenwich Mean Time)\\n    uint256 public terminationDate = 1830211200; // Unix timestamp of Fri Dec 31 2027 00:00:00 GMT+0000 (Greenwich Mean Time)\\n    uint256 public lastSalaryPaidDate; // Tracks last salary payment date\\n    uint256 public performanceScore = 0; // Performance score, updated by the authorized app\\n    uint256 public performanceThreshold = 0; // Performance score, updated by the authorized app\\n    bool public isEmployed = true; // Employment status\\n    string public salaryType = 'monthly'; // How often a salary payment to be initiated\\n    \\n    event SalaryUpdated(uint256 newSalary);\\n    event BonusPaid(uint256 bonusAmount);\\n    event EmploymentTerminated(string message);\\n    event DisputeResolved(string message);\\n    event SalaryPaid(uint256 amount);\\n    event PerformanceScoreUpdated(uint256 score);\\n    event PerformanceThresholdUpdated(uint256 threshold);\\n    event TerminationDateUpdated(uint256 newTerminationDate);\\n\\n    modifier onlyAuthorizedApp() {\\n        require(msg.sender == authorizedApp, \"Caller is not the authorized app\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _authorizedApp,\\n        address _usdcTokenAddress\\n    ) {\\n        employer = msg.sender; // The address deploying the contract is the employer\\n        authorizedApp = _authorizedApp;\\n        usdcToken = IERC20(_usdcTokenAddress);\\n        lastSalaryPaidDate = startDate; // Initialize with start date\\n    }\\n\\n    // Function to deposit USDC into the contract for salary payments\\n    function depositSalaryFunds(uint256 _amount) external nonReentrant {\\n        require(msg.sender == employer, \"Only the employer can deposit funds\");\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Function to automatically withdraw monthly salary funds from the employer\\n    function monthlyFunding() external onlyAuthorizedApp nonReentrant {\\n        uint256 amountNeeded = salary * 3; // Ensure buffer for 3 months\\n        uint256 currentBalance = usdcToken.balanceOf(address(this));\\n        uint256 shortfall = 0;\\n\\n        if (currentBalance < amountNeeded) {\\n            shortfall = amountNeeded - currentBalance;\\n            // Attempt to transfer the shortfall from the employer to the contract\\n            usdcToken.transferFrom(employer, address(this), shortfall);\\n        }\\n    }\\n\\n    // Automatically pay salary on a monthly basis\\n    function autoPaySalary() external onlyAuthorizedApp nonReentrant {\\n        require(isEmployed, \"Employment has ended\");\\n        require(block.timestamp >= lastSalaryPaidDate + 30 days, \"Salary already paid for this month\");\\n        require(usdcToken.balanceOf(address(this)) >= salary, \"Insufficient funds in contract\");\\n        require(performanceScore >= performanceThreshold, \"Performance score does not meet the required threshold. Employee is underperforming\");\\n\\n        lastSalaryPaidDate += 30 days; // Update last salary paid date to current month\\n        usdcToken.transfer(employee, salary);\\n        emit SalaryPaid(salary);\\n    }\\n\\n    // Update performance score\\n    function updatePerformanceScore(uint256 _newScore) external onlyAuthorizedApp {\\n        performanceScore = _newScore;\\n        emit PerformanceScoreUpdated(_newScore);\\n    }\\n\\n    // Update performance threshold \\n    function updatePerformanceThreshold(uint256 _threshold) external onlyAuthorizedApp {\\n        performanceThreshold = _threshold;\\n        emit PerformanceThresholdUpdated(_threshold);\\n    }\\n\\n    // Extend employment termination date\\n    function extendTerminationDate(uint256 _newTerminationDate) external onlyAuthorizedApp {\\n        require(_newTerminationDate > terminationDate, \"New date must be after current termination date\");\\n        terminationDate = _newTerminationDate;\\n        emit TerminationDateUpdated(_newTerminationDate);\\n    }\\n\\n    // Update salary\\n    function updateSalary(uint256 _newSalary) external onlyAuthorizedApp {\\n        salary = _newSalary;\\n        emit SalaryUpdated(_newSalary);\\n    }\\n\\n    // Pay bonus\\n    function payBonus(uint256 _bonusAmount) external onlyAuthorizedApp nonReentrant {\\n        require(usdcToken.balanceOf(address(this)) >= _bonusAmount, \"Insufficient funds in contract\");\\n        usdcToken.transfer(employee, _bonusAmount);\\n        emit BonusPaid(_bonusAmount);\\n    }\\n\\n    // Terminate employment with mutual agreement or trigger dispute resolution if disagreement\\n    function terminateEmployment(bool employeePermission, bool employerPermission, bool employerFault) external onlyAuthorizedApp {\\n        if (employeePermission && employerPermission) {\\n            // If both parties agree, terminate employment and notify\\n            isEmployed = false;\\n            emit EmploymentTerminated(\"Employment terminated by mutual agreement.\");\\n        } else {\\n            // If there is no mutual agreement, determine who does not agree and resolve the dispute\\n            _resolveDispute(employerFault);\\n        }\\n    }\\n\\n    // Function to check contract balance (for employer's view)\\n    function checkContractBalance() external view returns (uint256) {\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    // Additional function to handle disputes and protect the salary buffer\\n    function _resolveDispute(bool employerFault) internal {\\n        uint256 contractBalance = usdcToken.balanceOf(address(this));\\n        address recipient = employerFault ? employee : employer;\\n        usdcToken.transfer(recipient, contractBalance);\\n\\n        isEmployed = false;\\n\\n        string memory resolutionMessage = employerFault \\n            ? \"Employer at fault, funds transferred to employee.\" \\n            : \"Employee at fault, funds transferred to employer.\";\\n        emit DisputeResolved(resolutionMessage);\\n        emit EmploymentTerminated(\"Employment terminated due to dispute resolution.\");\\n    }\\n\\n    // External interface for dispute resolution, callable by authorized app\\n    function resolveDispute(bool employerFault) external onlyAuthorizedApp {\\n        _resolveDispute(employerFault);\\n    }\\n}\\n",
        "legal_contract": "Full-Time Employment Agreement\\nParties:\\nThis Full-Time Employment Agreement (\"Agreement\") is entered into between:\\nDataSprint Technologies Inc., a corporation organized and existing under the laws of California, with its principal place of business located at 123 Data Drive, San Francisco, CA 94105 (hereinafter referred to as the \"Company\"),\\nand\\nMichael Davis, an individual employed under the laws of California, with a residential address at 456 Oak Street, Los Angeles, CA 90001 (hereinafter referred to as the \"Employee\").\\nPosition and Duties:\\nThe Company hereby employs the Employee in the position of Senior Data Analyst on a full-time basis. The Employee agrees to analyze data, generate insights, and contribute to strategic decision-making processes.\\nTerm of Employment:\\nThe employment under this Agreement shall commence on January 1, 2026, and shall continue until terminated by either party in accordance with the terms herein. The initial term of employment shall be two years, terminating on December 31, 2027.\\nSalary:\\nThe Company agrees to pay the Employee a salary of $100,000 USD per annum. Salary payments will be made on a monthly basis, with the first payment occurring on January 31, 2026. The Employee's salary will be subject to applicable withholdings and deductions. Payment to be made to employees USDC address: 0x8932aa60a7b5efefa8ec3ee899fd238d029d10c6.\\n\\nBenefits:\\nIn addition to the salary, the Employee shall be entitled to participate in the Company's employee benefits program, including health insurance, dental coverage, and a 401(k) retirement savings plan with employer matching.\\nPerformance Review:\\nThe Employee's performance will be reviewed semi-annually by the Company's management team. Performance evaluations may result in salary increases, bonuses, or other forms of recognition for outstanding contributions.\\nTermination:\\nEither party may terminate this Agreement at any time, with or without cause, upon providing written notice to the other party. The notice period for termination shall be 30 days. Upon termination, the Employee shall be entitled to receive any accrued but unpaid salary up to the termination date.\\nConfidentiality:\\nThe Employee agrees to maintain strict confidentiality regarding all proprietary information of the Company, both during and after the term of employment.\\nGoverning Law:\\nThis Agreement shall be governed by and construed in accordance with the laws of the State of California.\\nEntire Agreement:\\nThis Agreement constitutes the entire understanding between the parties concerning the subject matter hereof and supersedes all prior agreements and understandings, whether written or oral.\\nIN WITNESS WHEREOF, the parties hereto have executed this Agreement as of the date first above written.\\nDataSprint Technologies Inc.\\nBy: Rachel Adams\\nName: Rachel Adams\\nTitle: Chief Executive Officer\\nDate: January 1, 2026\\nMichael Davis\\nBy: Michael Davis\\nName: Michael Davis\\nDate: January 1, 2026\\nTop of Form\\n"
    },
    {
        "smart_contract": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\"; // Interface for ERC20 tokens\\nimport \"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\"; // Prevent re-entrancy attacks\\n\\ncontract EmploymentContract is ReentrancyGuard {\\n    address public employer;\\n    address public employee = 0xfcfc2f2e9a18488e87f0fc88c95037a8506e8750;\\n    address private authorizedApp; // Address of the authorized app to update metrics\\n    uint256 public salary = 10833; // Monthly salary amount in USDC ($130,000 USD per annum)\\n    IERC20 private usdcToken; // USDC token contract interface\\n    uint256 public startDate = 1769904000; // Unix timestamp of Sun Feb 01 2026 00:00:00 GMT+0000 (Greenwich Mean Time)\\n    uint256 public terminationDate = 1864512000; // Unix timestamp of Wed Jan 31 2029 00:00:00 GMT+0000 (Greenwich Mean Time)\\n    uint256 public lastSalaryPaidDate; // Tracks last salary payment date\\n    uint256 public performanceScore = 0; // Performance score, updated by the authorized app\\n    uint256 public performanceThreshold = 0; \\n    bool public isEmployed = true; // Employment status\\n    string public salaryType = 'bi-weekly'; // How often a salary payment to be initiated\\n    \\n    event SalaryUpdated(uint256 newSalary);\\n    event BonusPaid(uint256 bonusAmount);\\n    event EmploymentTerminated(string message);\\n    event DisputeResolved(string message);\\n    event SalaryPaid(uint256 amount);\\n    event PerformanceScoreUpdated(uint256 score);\\n    event PerformanceThresholdUpdated(uint256 threshold);\\n    event TerminationDateUpdated(uint256 newTerminationDate);\\n\\n    modifier onlyAuthorizedApp() {\\n        require(msg.sender == authorizedApp, \"Caller is not the authorized app\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _authorizedApp,\\n        address _usdcTokenAddress\\n    ) {\\n        employer = msg.sender; // The address deploying the contract is the employer\\n        authorizedApp = _authorizedApp;\\n        usdcToken = IERC20(_usdcTokenAddress);\\n        lastSalaryPaidDate = startDate; // Initialize with start date\\n    }\\n\\n    // Function to deposit USDC into the contract for salary payments\\n    function depositSalaryFunds(uint256 _amount) external nonReentrant {\\n        require(msg.sender == employer, \"Only the employer can deposit funds\");\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Function to automatically withdraw monthly salary funds from the employer\\n    function monthlyFunding() external onlyAuthorizedApp nonReentrant {\\n        uint256 amountNeeded = salary * 3; // Ensure buffer for 3 months\\n        uint256 currentBalance = usdcToken.balanceOf(address(this));\\n        uint256 shortfall = 0;\\n\\n        if (currentBalance < amountNeeded) {\\n            shortfall = amountNeeded - currentBalance;\\n            // Attempt to transfer the shortfall from the employer to the contract\\n            usdcToken.transferFrom(employer, address(this), shortfall);\\n        }\\n    }\\n\\n    // Automatically pay salary on a monthly basis\\n    function autoPaySalary() external onlyAuthorizedApp nonReentrant {\\n        require(isEmployed, \"Employment has ended\");\\n        require(block.timestamp >= lastSalaryPaidDate + 14 days, \"Salary already paid for this period\");\\n        require(usdcToken.balanceOf(address(this)) >= salary, \"Insufficient funds in contract\");\\n        require(performanceScore >= performanceThreshold, \"Performance score does not meet the required threshold. Employee is underperforming\");\\n\\n        lastSalaryPaidDate += 14 days; // Update last salary paid date to current month\\n        usdcToken.transfer(employee, salary / 2.2); // Since there are 4.4 weeks in a months and the pay is bi-weekly\\n        emit SalaryPaid(salary);\\n    }\\n\\n    // Update performance score\\n    function updatePerformanceScore(uint256 _newScore) external onlyAuthorizedApp {\\n        performanceScore = _newScore;\\n        emit PerformanceScoreUpdated(_newScore);\\n    }\\n\\n    // Update performance threshold \\n    function updatePerformanceThreshold(uint256 _threshold) external onlyAuthorizedApp {\\n        performanceThreshold = _threshold;\\n        emit PerformanceThresholdUpdated(_threshold);\\n    }\\n\\n    // Extend employment termination date\\n    function extendTerminationDate(uint256 _newTerminationDate) external onlyAuthorizedApp {\\n        require(_newTerminationDate > terminationDate, \"New date must be after current termination date\");\\n        terminationDate = _newTerminationDate;\\n        emit TerminationDateUpdated(_newTerminationDate);\\n    }\\n\\n    // Update salary\\n    function updateSalary(uint256 _newSalary) external onlyAuthorizedApp {\\n        salary = _newSalary;\\n        emit SalaryUpdated(_newSalary);\\n    }\\n\\n    // Pay bonus\\n    function payBonus(uint256 _bonusAmount) external onlyAuthorizedApp nonReentrant {\\n        require(usdcToken.balanceOf(address(this)) >= _bonusAmount, \"Insufficient funds in contract\");\\n        usdcToken.transfer(employee, _bonusAmount);\\n        emit BonusPaid(_bonusAmount);\\n    }\\n\\n    // Terminate employment with mutual agreement or trigger dispute resolution if disagreement\\n    function terminateEmployment(bool employeePermission, bool employerPermission, bool employerFault) external onlyAuthorizedApp {\\n        if (employeePermission && employerPermission) {\\n            // If both parties agree, terminate employment and notify\\n            isEmployed = false;\\n            emit EmploymentTerminated(\"Employment terminated by mutual agreement.\");\\n        } else {\\n            // If there is no mutual agreement, determine who does not agree and resolve the dispute\\n            _resolveDispute(employerFault);\\n        }\\n    }\\n\\n    // Function to check contract balance (for employer's view)\\n    function checkContractBalance() external view returns (uint256) {\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    // Additional function to handle disputes and protect the salary buffer\\n    function _resolveDispute(bool employerFault) internal {\\n        uint256 contractBalance = usdcToken.balanceOf(address(this));\\n        address recipient = employerFault ? employee : employer;\\n        usdcToken.transfer(recipient, contractBalance);\\n\\n        isEmployed = false;\\n\\n        string memory resolutionMessage = employerFault \\n            ? \"Employer at fault, funds transferred to employee.\" \\n            : \"Employee at fault, funds transferred to employer.\";\\n        emit DisputeResolved(resolutionMessage);\\n        emit EmploymentTerminated(\"Employment terminated due to dispute resolution.\");\\n    }\\n\\n    // External interface for dispute resolution, callable by authorized app\\n    function resolveDispute(bool employerFault) external onlyAuthorizedApp {\\n        _resolveDispute(employerFault);\\n    }\\n}\\n",
        "legal_contract": "Full-Time Employment Agreement\\nParties:\\nThis Full-Time Employment Agreement (\"Agreement\") is entered into between:\\nTechNexus Innovations Inc., a corporation organized and existing under the laws of California, with its principal place of business located at 789 Nexus Avenue, San Francisco, CA 94105 (hereinafter referred to as the \"Company\"),\\nand\\nOlivia Garcia, an individual employed under the laws of California, with a residential address at 456 Maple Street, Los Angeles, CA 90001 (hereinafter referred to as the \"Employee\").\\nPosition and Duties:\\nThe Company hereby employs the Employee in the position of Senior Software Engineer on a full-time basis. The Employee agrees to design, develop, and maintain software applications to meet the Company's business objectives.\\nTerm of Employment:\\nThe employment under this Agreement shall commence on February 1, 2026, and shall continue until terminated by either party in accordance with the terms herein. The initial term of employment shall be three years, terminating on January 31, 2029.\\nSalary:\\nThe Company agrees to pay the Employee a salary of $130,000 USD per annum. Salary payments will be made on a bi-weekly basis, with the first payment occurring on February 15, 2026. The Employee's salary will be subject to applicable withholdings and deductions. Payment to be made to employees USDC address: 0xfcfc2f2e9a18488e87f0fc88c95037a8506e8750.\\nBenefits:\\nIn addition to the salary, the Employee shall be entitled to participate in the Company's employee benefits program, including health insurance, dental coverage, and a 401(k) retirement savings plan with employer matching.\\nPerformance Review:\\nThe Employee's performance will be reviewed semi-annually by the Company's management team. Performance evaluations may result in salary increases, bonuses, or other forms of recognition for exceptional performance.\\nTermination:\\nEither party may terminate this Agreement at any time, with or without cause, upon providing written notice to the other party. The notice period for termination shall be 30 days. Upon termination, the Employee shall be entitled to receive any accrued but unpaid salary up to the termination date.\\nConfidentiality:\\nThe Employee agrees to maintain strict confidentiality regarding all proprietary information of the Company, both during and after the term of employment.\\nGoverning Law:\\nThis Agreement shall be governed by and construed in accordance with the laws of the State of California.\\nEntire Agreement:\\nThis Agreement constitutes the entire understanding between the parties concerning the subject matter hereof and supersedes all prior agreements and understandings, whether written or oral.\\nIN WITNESS WHEREOF, the parties hereto have executed this Agreement as of the date first above written.\\nTechNexus Innovations Inc.\\nBy: Ethan Miller\\nName: Ethan Miller\\nTitle: Chief Executive Officer\\nDate: February 1, 2026\\nOlivia Garcia\\nBy: Olivia Garcia\\nName: Olivia Garcia\\nDate: February 1, 2026\\n"
    },
    {
        "smart_contract": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\"; // Interface for ERC20 tokens\\nimport \"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\"; // Prevent re-entrancy attacks\\n\\ncontract EmploymentContract is ReentrancyGuard {\\n    address public employer;\\n    address public employee = 0x0ccb4faa6f1f1b30911619f1184082ab4e25813c;\\n    address private authorizedApp; // Address of the authorized app to update metrics\\n    uint256 public salary = 11666; // Monthly salary amount in USDC ($140,000 USD per annum)\\n    IERC20 private usdcToken; // USDC token contract interface\\n    uint256 public startDate = 1772323200; // Unix timestamp \\n    uint256 public terminationDate = 5555555555; // Open ended contract with no termination date bein set up, hence we set it to a very distant point. Could be updated later on\\n    uint256 public lastSalaryPaidDate; // Tracks last salary payment date\\n    uint256 public performanceScore = 0; // Performance score, updated by the authorized app\\n    uint256 public performanceThreshold = 0; \\n    bool public isEmployed = true; // Employment status\\n    string public salaryType = 'monthly'; // How often a salary payment to be initiated\\n    \\n    event SalaryUpdated(uint256 newSalary);\\n    event BonusPaid(uint256 bonusAmount);\\n    event EmploymentTerminated(string message);\\n    event DisputeResolved(string message);\\n    event SalaryPaid(uint256 amount);\\n    event PerformanceScoreUpdated(uint256 score);\\n    event PerformanceThresholdUpdated(uint256 threshold);\\n    event TerminationDateUpdated(uint256 newTerminationDate);\\n\\n    modifier onlyAuthorizedApp() {\\n        require(msg.sender == authorizedApp, \"Caller is not the authorized app\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _authorizedApp,\\n        address _usdcTokenAddress\\n    ) {\\n        employer = msg.sender; // The address deploying the contract is the employer\\n        authorizedApp = _authorizedApp;\\n        usdcToken = IERC20(_usdcTokenAddress);\\n        lastSalaryPaidDate = startDate; // Initialize with start date\\n    }\\n\\n    // Function to deposit USDC into the contract for salary payments\\n    function depositSalaryFunds(uint256 _amount) external nonReentrant {\\n        require(msg.sender == employer, \"Only the employer can deposit funds\");\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Function to automatically withdraw monthly salary funds from the employer\\n    function monthlyFunding() external onlyAuthorizedApp nonReentrant {\\n        uint256 amountNeeded = salary * 3; // Ensure buffer for 3 months\\n        uint256 currentBalance = usdcToken.balanceOf(address(this));\\n        uint256 shortfall = 0;\\n\\n        if (currentBalance < amountNeeded) {\\n            shortfall = amountNeeded - currentBalance;\\n            // Attempt to transfer the shortfall from the employer to the contract\\n            usdcToken.transferFrom(employer, address(this), shortfall);\\n        }\\n    }\\n\\n    // Automatically pay salary on a monthly basis\\n    function autoPaySalary() external onlyAuthorizedApp nonReentrant {\\n        require(isEmployed, \"Employment has ended\");\\n        require(block.timestamp >= lastSalaryPaidDate + 30 days, \"Salary already paid for this month\");\\n        require(usdcToken.balanceOf(address(this)) >= salary, \"Insufficient funds in contract\");\\n        require(performanceScore >= performanceThreshold, \"Performance score does not meet the required threshold. Employee is underperforming\");\\n\\n        lastSalaryPaidDate += 30 days; // Update last salary paid date to current month\\n        usdcToken.transfer(employee, salary);\\n        emit SalaryPaid(salary);\\n    }\\n\\n    // Update performance score\\n    function updatePerformanceScore(uint256 _newScore) external onlyAuthorizedApp {\\n        performanceScore = _newScore;\\n        emit PerformanceScoreUpdated(_newScore);\\n    }\\n\\n    // Update performance threshold \\n    function updatePerformanceThreshold(uint256 _threshold) external onlyAuthorizedApp {\\n        performanceThreshold = _threshold;\\n        emit PerformanceThresholdUpdated(_threshold);\\n    }\\n\\n    // Extend employment termination date\\n    function extendTerminationDate(uint256 _newTerminationDate) external onlyAuthorizedApp {\\n        require(_newTerminationDate > terminationDate, \"New date must be after current termination date\");\\n        terminationDate = _newTerminationDate;\\n        emit TerminationDateUpdated(_newTerminationDate);\\n    }\\n\\n    // Update salary\\n    function updateSalary(uint256 _newSalary) external onlyAuthorizedApp {\\n        salary = _newSalary;\\n        emit SalaryUpdated(_newSalary);\\n    }\\n\\n    // Pay bonus\\n    function payBonus(uint256 _bonusAmount) external onlyAuthorizedApp nonReentrant {\\n        require(usdcToken.balanceOf(address(this)) >= _bonusAmount, \"Insufficient funds in contract\");\\n        usdcToken.transfer(employee, _bonusAmount);\\n        emit BonusPaid(_bonusAmount);\\n    }\\n\\n    // Terminate employment with mutual agreement or trigger dispute resolution if disagreement\\n    function terminateEmployment(bool employeePermission, bool employerPermission, bool employerFault) external onlyAuthorizedApp {\\n        if (employeePermission && employerPermission) {\\n            // If both parties agree, terminate employment and notify\\n            isEmployed = false;\\n            emit EmploymentTerminated(\"Employment terminated by mutual agreement.\");\\n        } else {\\n            // If there is no mutual agreement, determine who does not agree and resolve the dispute\\n            _resolveDispute(employerFault);\\n        }\\n    }\\n\\n    // Function to check contract balance (for employer's view)\\n    function checkContractBalance() external view returns (uint256) {\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    // Additional function to handle disputes and protect the salary buffer\\n    function _resolveDispute(bool employerFault) internal {\\n        uint256 contractBalance = usdcToken.balanceOf(address(this));\\n        address recipient = employerFault ? employee : employer;\\n        usdcToken.transfer(recipient, contractBalance);\\n\\n        isEmployed = false;\\n\\n        string memory resolutionMessage = employerFault \\n            ? \"Employer at fault, funds transferred to employee.\" \\n            : \"Employee at fault, funds transferred to employer.\";\\n        emit DisputeResolved(resolutionMessage);\\n        emit EmploymentTerminated(\"Employment terminated due to dispute resolution.\");\\n    }\\n\\n    // External interface for dispute resolution, callable by authorized app\\n    function resolveDispute(bool employerFault) external onlyAuthorizedApp {\\n        _resolveDispute(employerFault);\\n    }\\n}\\n",
        "legal_contract": "Full-Time Employment Agreement\\nParties:\\nThis Full-Time Employment Agreement (\"Agreement\") is entered into between:\\nQuantumTech Solutions Inc., a corporation organized and existing under the laws of California, with its principal place of business located at 123 Quantum Street, San Francisco, CA 94105 (hereinafter referred to as the \"Company\"),\\nand\\nDavid Wilson, an individual employed under the laws of California, with a residential address at 456 Oak Avenue, Los Angeles, CA 90001 (hereinafter referred to as the \"Employee\").\\nPosition and Duties:\\nThe Company hereby employs the Employee in the position of Senior AI Engineer on a full-time basis. The Employee agrees to develop and implement artificial intelligence algorithms, conduct research, and contribute to innovative projects.\\nTerm of Employment:\\nThe employment under this Agreement shall commence on March 1, 2026, and shall continue until terminated by either party in accordance with the terms herein. The initial term of employment shall be two years, terminating on February 28, 2028.\\nSalary:\\nThe Company agrees to pay the Employee a salary of $140,000 USD per annum. Salary payments will be made on a monthly basis, with the first payment occurring on March 31, 2026. The Employee's salary will be subject to applicable withholdings and deductions. Payment to be made to employees USDC address: 0x0ccb4faa6f1f1b30911619f1184082ab4e25813c.\\nBenefits:\\nIn addition to the salary, the Employee shall be entitled to participate in the Company's employee benefits program, including health insurance, dental coverage, and a 401(k) retirement savings plan with employer matching.\\nPerformance Review:\\nThe Employee's performance will be reviewed annually by the Company's management team. Performance evaluations may result in salary increases, bonuses, or other forms of recognition for exceptional contributions.\\nTermination:\\nEither party may terminate this Agreement at any time, with or without cause, upon providing written notice to the other party. The notice period for termination shall be 30 days. Upon termination, the Employee shall be entitled to receive any accrued but unpaid salary up to the termination date.\\nConfidentiality:\\nThe Employee agrees to maintain strict confidentiality regarding all proprietary information of the Company, both during and after the term of employment.\\nUSDC Wallet Address:\\nThe Company agrees to pay the Employee's salary in USDC tokens to the following wallet address: 0x5AbCDeF0123456789AbCDeF0123456789AbCDeF0\\nGoverning Law:\\nThis Agreement shall be governed by and construed in accordance with the laws of the State of California.\\nEntire Agreement:\\nThis Agreement constitutes the entire understanding between the parties concerning the subject matter hereof and supersedes all prior agreements and understandings, whether written or oral.\\nIN WITNESS WHEREOF, the parties hereto have executed this Agreement as of the date first above written.\\nQuantumTech Solutions Inc.\\nBy: Sarah Adams\\nName: Sarah Adams\\nTitle: CEO\\nDate: March 1, 2026\\nDavid Wilson\\nBy: David Wilson\\nName: David Wilson\\nDate: March 1, 2026\\nTop of Form\\n"
    },
    {
        "smart_contract": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\"; // Interface for ERC20 tokens\\nimport \"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\"; // Prevent re-entrancy attacks\\n\\ncontract EmploymentContract is ReentrancyGuard {\\n    address public employer;\\n    address public employee = 0xfae2ae0a9f87fd35b5b0e24b47bac796a7eefea1;\\n    address private authorizedApp; // Address of the authorized app to update metrics\\n    uint256 public salary = 10416; // Monthly salary amount in USDC ($125,000 USD per annum)\\n    IERC20 private usdcToken; // USDC token contract interface\\n    uint256 public startDate = 1774998000; // Unix timestamp of Wed Apr 01 2026 00:00:00 GMT+0100 (British Summer Time)\\n    uint256 public terminationDate = 1869606000; // Unix timestamp of Sat Mar 31 2029 00:00:00 GMT+0100 (British Summer Time)\\n    uint256 public lastSalaryPaidDate; // Tracks last salary payment date\\n    uint256 public performanceScore = 0; // Performance score, updated by the authorized app\\n    uint256 public performanceThreshold = 0; \\n    bool public isEmployed = true; // Employment status\\n    string public salaryType = 'bi-weekly'; // How often a salary payment to be initiated\\n    \\n    event SalaryUpdated(uint256 newSalary);\\n    event BonusPaid(uint256 bonusAmount);\\n    event EmploymentTerminated(string message);\\n    event DisputeResolved(string message);\\n    event SalaryPaid(uint256 amount);\\n    event PerformanceScoreUpdated(uint256 score);\\n    event PerformanceThresholdUpdated(uint256 threshold);\\n    event TerminationDateUpdated(uint256 newTerminationDate);\\n\\n    modifier onlyAuthorizedApp() {\\n        require(msg.sender == authorizedApp, \"Caller is not the authorized app\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _authorizedApp,\\n        address _usdcTokenAddress\\n    ) {\\n        employer = msg.sender; // The address deploying the contract is the employer\\n        authorizedApp = _authorizedApp;\\n        usdcToken = IERC20(_usdcTokenAddress);\\n        lastSalaryPaidDate = startDate; // Initialize with start date\\n    }\\n\\n    // Function to deposit USDC into the contract for salary payments\\n    function depositSalaryFunds(uint256 _amount) external nonReentrant {\\n        require(msg.sender == employer, \"Only the employer can deposit funds\");\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Function to automatically withdraw monthly salary funds from the employer\\n    function monthlyFunding() external onlyAuthorizedApp nonReentrant {\\n        uint256 amountNeeded = salary * 3; // Ensure buffer for 3 months\\n        uint256 currentBalance = usdcToken.balanceOf(address(this));\\n        uint256 shortfall = 0;\\n\\n        if (currentBalance < amountNeeded) {\\n            shortfall = amountNeeded - currentBalance;\\n            // Attempt to transfer the shortfall from the employer to the contract\\n            usdcToken.transferFrom(employer, address(this), shortfall);\\n        }\\n    }\\n\\n    // Automatically pay salary on a monthly basis\\n    function autoPaySalary() external onlyAuthorizedApp nonReentrant {\\n        require(isEmployed, \"Employment has ended\");\\n        require(block.timestamp >= lastSalaryPaidDate + 14 days, \"Salary already paid for this period\");\\n        require(usdcToken.balanceOf(address(this)) >= salary, \"Insufficient funds in contract\");\\n        require(performanceScore >= performanceThreshold, \"Performance score does not meet the required threshold. Employee is underperforming\");\\n\\n        lastSalaryPaidDate += 14 days; // Update last salary paid date to current month\\n        usdcToken.transfer(employee, salary / 2.2); // Since there are 4.4 weeks in a months and the pay is bi-weekly\\n        emit SalaryPaid(salary);\\n    }\\n\\n    // Update performance score\\n    function updatePerformanceScore(uint256 _newScore) external onlyAuthorizedApp {\\n        performanceScore = _newScore;\\n        emit PerformanceScoreUpdated(_newScore);\\n    }\\n\\n    // Update performance threshold \\n    function updatePerformanceThreshold(uint256 _threshold) external onlyAuthorizedApp {\\n        performanceThreshold = _threshold;\\n        emit PerformanceThresholdUpdated(_threshold);\\n    }\\n\\n    // Extend employment termination date\\n    function extendTerminationDate(uint256 _newTerminationDate) external onlyAuthorizedApp {\\n        require(_newTerminationDate > terminationDate, \"New date must be after current termination date\");\\n        terminationDate = _newTerminationDate;\\n        emit TerminationDateUpdated(_newTerminationDate);\\n    }\\n\\n    // Update salary\\n    function updateSalary(uint256 _newSalary) external onlyAuthorizedApp {\\n        salary = _newSalary;\\n        emit SalaryUpdated(_newSalary);\\n    }\\n\\n    // Pay bonus\\n    function payBonus(uint256 _bonusAmount) external onlyAuthorizedApp nonReentrant {\\n        require(usdcToken.balanceOf(address(this)) >= _bonusAmount, \"Insufficient funds in contract\");\\n        usdcToken.transfer(employee, _bonusAmount);\\n        emit BonusPaid(_bonusAmount);\\n    }\\n\\n    // Terminate employment with mutual agreement or trigger dispute resolution if disagreement\\n    function terminateEmployment(bool employeePermission, bool employerPermission, bool employerFault) external onlyAuthorizedApp {\\n        if (employeePermission && employerPermission) {\\n            // If both parties agree, terminate employment and notify\\n            isEmployed = false;\\n            emit EmploymentTerminated(\"Employment terminated by mutual agreement.\");\\n        } else {\\n            // If there is no mutual agreement, determine who does not agree and resolve the dispute\\n            _resolveDispute(employerFault);\\n        }\\n    }\\n\\n    // Function to check contract balance (for employer's view)\\n    function checkContractBalance() external view returns (uint256) {\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    // Additional function to handle disputes and protect the salary buffer\\n    function _resolveDispute(bool employerFault) internal {\\n        uint256 contractBalance = usdcToken.balanceOf(address(this));\\n        address recipient = employerFault ? employee : employer;\\n        usdcToken.transfer(recipient, contractBalance);\\n\\n        isEmployed = false;\\n\\n        string memory resolutionMessage = employerFault \\n            ? \"Employer at fault, funds transferred to employee.\" \\n            : \"Employee at fault, funds transferred to employer.\";\\n        emit DisputeResolved(resolutionMessage);\\n        emit EmploymentTerminated(\"Employment terminated due to dispute resolution.\");\\n    }\\n\\n    // External interface for dispute resolution, callable by authorized app\\n    function resolveDispute(bool employerFault) external onlyAuthorizedApp {\\n        _resolveDispute(employerFault);\\n    }\\n}\\n",
        "legal_contract": "Full-Time Employment Agreement\\nParties:\\nThis Full-Time Employment Agreement (\"Agreement\") is entered into between:\\nInnovative Solutions Group Inc., a corporation organized and existing under the laws of California, with its principal place of business located at 789 Innovation Avenue, San Francisco, CA 94105 (hereinafter referred to as the \"Company\"),\\nand\\nSophie Adams, an individual employed under the laws of California, with a residential address at 456 Elm Street, Los Angeles, CA 90001 (hereinafter referred to as the \"Employee\").\\nPosition and Duties:\\nThe Company hereby employs the Employee in the position of Senior Product Manager on a full-time basis. The Employee agrees to oversee product development, market analysis, and strategic planning to drive business growth and success.\\nTerm of Employment:\\nThe employment under this Agreement shall commence on April 1, 2026, and shall continue until terminated by either party in accordance with the terms herein. The initial term of employment shall be three years, terminating on March 31, 2029. Payment to be made to employees USDC address: 0xfae2ae0a9f87fd35b5b0e24b47bac796a7eefea1.\\nSalary:\\nThe Company agrees to pay the Employee a salary of $125,000 USD per annum. Salary payments will be made on a bi-weekly basis, with the first payment occurring on April 15, 2026. The Employee's salary will be subject to applicable withholdings and deductions.\\nBenefits:\\nIn addition to the salary, the Employee shall be entitled to participate in the Company's employee benefits program, including health insurance, dental coverage, and a 401(k) retirement savings plan with employer matching.\\nPerformance Review:\\nThe Employee's performance will be reviewed semi-annually by the Company's management team. Performance evaluations may result in salary increases, bonuses, or other forms of recognition for outstanding contributions.\\nTermination:\\nEither party may terminate this Agreement at any time, with or without cause, upon providing written notice to the other party. The notice period for termination shall be 30 days. Upon termination, the Employee shall be entitled to receive any accrued but unpaid salary up to the termination date.\\nConfidentiality:\\nThe Employee agrees to maintain strict confidentiality regarding all proprietary information of the Company, both during and after the term of employment.\\nGoverning Law:\\nThis Agreement shall be governed by and construed in accordance with the laws of the State of California.\\nEntire Agreement:\\nThis Agreement constitutes the entire understanding between the parties concerning the subject matter hereof and supersedes all prior agreements and understandings, whether written or oral.\\nIN WITNESS WHEREOF, the parties hereto have executed this Agreement as of the date first above written.\\nInnovative Solutions Group Inc.\\nBy: Ryan Johnson\\nName: Ryan Johnson\\nTitle: CEO\\nDate: April 1, 2026\\nSophie Adams\\nBy: Sophie Adams\\nName: Sophie Adams\\nDate: April 1, 2026\\nTop of Form\\n"
    },
    {
        "smart_contract": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\"; // Interface for ERC20 tokens\\nimport \"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\"; // Prevent re-entrancy attacks\\n\\ncontract EmploymentContract is ReentrancyGuard {\\n    address public employer;\\n    address public employee = 0x69f1216cb2905bf0852f74624d5fa7b5fc4da710;\\n    address private authorizedApp; // Address of the authorized app to update metrics\\n    uint256 public salary = 11250; // Monthly salary amount in USDC ($130,000 USD per annum)\\n    IERC20 private usdcToken; // USDC token contract interface\\n    uint256 public startDate = 1777590000; // Unix timestamp of\tFri May 01 2026 00:00:00 GMT+0100 (British Summer Time)\\n    uint256 public terminationDate = 1840662000; // Unix timestamp of Sun Apr 30 2028 00:00:00 GMT+0100 (British Summer Time)\\n    uint256 public lastSalaryPaidDate; // Tracks last salary payment date\\n    uint256 public performanceScore = 0; // Performance score, updated by the authorized app\\n    uint256 public performanceThreshold = 0; \\n    bool public isEmployed = true; // Employment status\\n    string public salaryType = 'monthly'; // How often a salary payment to be initiated\\n    \\n    event SalaryUpdated(uint256 newSalary);\\n    event BonusPaid(uint256 bonusAmount);\\n    event EmploymentTerminated(string message);\\n    event DisputeResolved(string message);\\n    event SalaryPaid(uint256 amount);\\n    event PerformanceScoreUpdated(uint256 score);\\n    event PerformanceThresholdUpdated(uint256 threshold);\\n    event TerminationDateUpdated(uint256 newTerminationDate);\\n\\n    modifier onlyAuthorizedApp() {\\n        require(msg.sender == authorizedApp, \"Caller is not the authorized app\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _authorizedApp,\\n        address _usdcTokenAddress\\n    ) {\\n        employer = msg.sender; // The address deploying the contract is the employer\\n        authorizedApp = _authorizedApp;\\n        usdcToken = IERC20(_usdcTokenAddress);\\n        lastSalaryPaidDate = startDate; // Initialize with start date\\n    }\\n\\n    // Function to deposit USDC into the contract for salary payments\\n    function depositSalaryFunds(uint256 _amount) external nonReentrant {\\n        require(msg.sender == employer, \"Only the employer can deposit funds\");\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Function to automatically withdraw monthly salary funds from the employer\\n    function monthlyFunding() external onlyAuthorizedApp nonReentrant {\\n        uint256 amountNeeded = salary * 3; // Ensure buffer for 3 months\\n        uint256 currentBalance = usdcToken.balanceOf(address(this));\\n        uint256 shortfall = 0;\\n\\n        if (currentBalance < amountNeeded) {\\n            shortfall = amountNeeded - currentBalance;\\n            // Attempt to transfer the shortfall from the employer to the contract\\n            usdcToken.transferFrom(employer, address(this), shortfall);\\n        }\\n    }\\n\\n    // Automatically pay salary on a monthly basis\\n    function autoPaySalary() external onlyAuthorizedApp nonReentrant {\\n        require(isEmployed, \"Employment has ended\");\\n        require(block.timestamp >= lastSalaryPaidDate + 30 days, \"Salary already paid for this month\");\\n        require(usdcToken.balanceOf(address(this)) >= salary, \"Insufficient funds in contract\");\\n        require(performanceScore >= performanceThreshold, \"Performance score does not meet the required threshold. Employee is underperforming\");\\n\\n        lastSalaryPaidDate += 30 days; // Update last salary paid date to current month\\n        usdcToken.transfer(employee, salary);\\n        emit SalaryPaid(salary);\\n    }\\n\\n    // Update performance score\\n    function updatePerformanceScore(uint256 _newScore) external onlyAuthorizedApp {\\n        performanceScore = _newScore;\\n        emit PerformanceScoreUpdated(_newScore);\\n    }\\n\\n    // Update performance threshold \\n    function updatePerformanceThreshold(uint256 _threshold) external onlyAuthorizedApp {\\n        performanceThreshold = _threshold;\\n        emit PerformanceThresholdUpdated(_threshold);\\n    }\\n\\n    // Extend employment termination date\\n    function extendTerminationDate(uint256 _newTerminationDate) external onlyAuthorizedApp {\\n        require(_newTerminationDate > terminationDate, \"New date must be after current termination date\");\\n        terminationDate = _newTerminationDate;\\n        emit TerminationDateUpdated(_newTerminationDate);\\n    }\\n\\n    // Update salary\\n    function updateSalary(uint256 _newSalary) external onlyAuthorizedApp {\\n        salary = _newSalary;\\n        emit SalaryUpdated(_newSalary);\\n    }\\n\\n    // Pay bonus\\n    function payBonus(uint256 _bonusAmount) external onlyAuthorizedApp nonReentrant {\\n        require(usdcToken.balanceOf(address(this)) >= _bonusAmount, \"Insufficient funds in contract\");\\n        usdcToken.transfer(employee, _bonusAmount);\\n        emit BonusPaid(_bonusAmount);\\n    }\\n\\n    // Terminate employment with mutual agreement or trigger dispute resolution if disagreement\\n    function terminateEmployment(bool employeePermission, bool employerPermission, bool employerFault) external onlyAuthorizedApp {\\n        if (employeePermission && employerPermission) {\\n            // If both parties agree, terminate employment and notify\\n            isEmployed = false;\\n            emit EmploymentTerminated(\"Employment terminated by mutual agreement.\");\\n        } else {\\n            // If there is no mutual agreement, determine who does not agree and resolve the dispute\\n            _resolveDispute(employerFault);\\n        }\\n    }\\n\\n    // Function to check contract balance (for employer's view)\\n    function checkContractBalance() external view returns (uint256) {\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    // Additional function to handle disputes and protect the salary buffer\\n    function _resolveDispute(bool employerFault) internal {\\n        uint256 contractBalance = usdcToken.balanceOf(address(this));\\n        address recipient = employerFault ? employee : employer;\\n        usdcToken.transfer(recipient, contractBalance);\\n\\n        isEmployed = false;\\n\\n        string memory resolutionMessage = employerFault \\n            ? \"Employer at fault, funds transferred to employee.\" \\n            : \"Employee at fault, funds transferred to employer.\";\\n        emit DisputeResolved(resolutionMessage);\\n        emit EmploymentTerminated(\"Employment terminated due to dispute resolution.\");\\n    }\\n\\n    // External interface for dispute resolution, callable by authorized app\\n    function resolveDispute(bool employerFault) external onlyAuthorizedApp {\\n        _resolveDispute(employerFault);\\n    }\\n}\\n",
        "legal_contract": "Full-Time Employment Agreement\\nParties:\\nThis Full-Time Employment Agreement (\"Agreement\") is entered into between:\\nTechWave Innovations Inc., a corporation organized and existing under the laws of California, with its principal place of business located at 123 Tech Avenue, San Francisco, CA 94105 (hereinafter referred to as the \"Company\"),\\nand\\nDaniel Parker, an individual employed under the laws of California, with a residential address at 456 Maple Street, Los Angeles, CA 90001 (hereinafter referred to as the \"Employee\").\\nPosition and Duties:\\nThe Company hereby employs the Employee in the position of Senior Data Scientist on a full-time basis. The Employee agrees to analyze data, develop machine learning models, and provide insights to support strategic decision-making.\\nTerm of Employment:\\nThe employment under this Agreement shall commence on May 1, 2026, and shall continue until terminated by either party in accordance with the terms herein. The initial term of employment shall be two years, terminating on April 30, 2028.\\nSalary:\\nThe Company agrees to pay the Employee a salary of $135,000 USD per annum. Salary payments will be made on a monthly basis, with the first payment occurring on May 31, 2026. The Employee's salary will be subject to applicable withholdings and deductions. Payment to be made to employees USDC address: 0x69f1216cb2905bf0852f74624d5fa7b5fc4da710\\nBenefits:\\nIn addition to the salary, the Employee shall be entitled to participate in the Company's employee benefits program, including health insurance, dental coverage, and a 401(k) retirement savings plan with employer matching.\\nPerformance Review:\\nThe Employee's performance will be reviewed annually by the Company's management team. Performance evaluations may result in salary increases, bonuses, or other forms of recognition for outstanding contributions.\\nTermination:\\nEither party may terminate this Agreement at any time, with or without cause, upon providing written notice to the other party. The notice period for termination shall be 30 days. Upon termination, the Employee shall be entitled to receive any accrued but unpaid salary up to the termination date.\\nConfidentiality:\\nThe Employee agrees to maintain strict confidentiality regarding all proprietary information of the Company, both during and after the term of employment.\\nGoverning Law:\\nThis Agreement shall be governed by and construed in accordance with the laws of the State of California.\\nEntire Agreement:\\nThis Agreement constitutes the entire understanding between the parties concerning the subject matter hereof and supersedes all prior agreements and understandings, whether written or oral.\\nIN WITNESS WHEREOF, the parties hereto have executed this Agreement as of the date first above written.\\nTechWave Innovations Inc.\\nBy: Emily Watson\\nName: Emily Watson\\nTitle: CEO\\nDate: May 1, 2026\\nDaniel Parker\\nBy: Daniel Parker\\nName: Daniel Parker\\nDate: May 1, 2026\\nTop of Form\\n"
    },
    {
        "smart_contract": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\"; // Interface for ERC20 tokens\\nimport \"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\"; // Prevent re-entrancy attacks\\n\\ncontract EmploymentContract is ReentrancyGuard {\\n    address public employer;\\n    address public employee = 0x20fa1822a87d4e7a3ccf20f86e716ef3772ecff1;\\n    address private authorizedApp; // Address of the authorized app to update metrics\\n    uint256 public salary = 10833; // Monthly salary amount in USDC ($130,000 USD per annum)\\n    IERC20 private usdcToken; // USDC token contract interface\\n    uint256 public startDate = 1780268400; // Unix timestamp of\tMon Jun 01 2026 00:00:00 GMT+0100 (British Summer Time)\\n    uint256 public terminationDate = 1874876400; // Unix timestamp ofThu May 31 2029 00:00:00 GMT+0100 (British Summer Time)\\n    uint256 public lastSalaryPaidDate; // Tracks last salary payment date\\n    uint256 public performanceScore = 0; // Performance score, updated by the authorized app\\n    uint256 public performanceThreshold = 0; \\n    bool public isEmployed = true; // Employment status\\n    string public salaryType = 'bi-weekly'; // How often a salary payment to be initiated\\n    \\n    event SalaryUpdated(uint256 newSalary);\\n    event BonusPaid(uint256 bonusAmount);\\n    event EmploymentTerminated(string message);\\n    event DisputeResolved(string message);\\n    event SalaryPaid(uint256 amount);\\n    event PerformanceScoreUpdated(uint256 score);\\n    event PerformanceThresholdUpdated(uint256 threshold);\\n    event TerminationDateUpdated(uint256 newTerminationDate);\\n\\n    modifier onlyAuthorizedApp() {\\n        require(msg.sender == authorizedApp, \"Caller is not the authorized app\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _authorizedApp,\\n        address _usdcTokenAddress\\n    ) {\\n        employer = msg.sender; // The address deploying the contract is the employer\\n        authorizedApp = _authorizedApp;\\n        usdcToken = IERC20(_usdcTokenAddress);\\n        lastSalaryPaidDate = startDate; // Initialize with start date\\n    }\\n\\n    // Function to deposit USDC into the contract for salary payments\\n    function depositSalaryFunds(uint256 _amount) external nonReentrant {\\n        require(msg.sender == employer, \"Only the employer can deposit funds\");\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Function to automatically withdraw monthly salary funds from the employer\\n    function monthlyFunding() external onlyAuthorizedApp nonReentrant {\\n        uint256 amountNeeded = salary * 3; // Ensure buffer for 3 months\\n        uint256 currentBalance = usdcToken.balanceOf(address(this));\\n        uint256 shortfall = 0;\\n\\n        if (currentBalance < amountNeeded) {\\n            shortfall = amountNeeded - currentBalance;\\n            // Attempt to transfer the shortfall from the employer to the contract\\n            usdcToken.transferFrom(employer, address(this), shortfall);\\n        }\\n    }\\n\\n    // Automatically pay salary on a monthly basis\\n    function autoPaySalary() external onlyAuthorizedApp nonReentrant {\\n        require(isEmployed, \"Employment has ended\");\\n        require(block.timestamp >= lastSalaryPaidDate + 14 days, \"Salary already paid for this period\");\\n        require(usdcToken.balanceOf(address(this)) >= salary, \"Insufficient funds in contract\");\\n        require(performanceScore >= performanceThreshold, \"Performance score does not meet the required threshold. Employee is underperforming\");\\n\\n        lastSalaryPaidDate += 14 days; // Update last salary paid date to current month\\n        usdcToken.transfer(employee, salary / 2.2); // Since there are 4.4 weeks in a months and the pay is bi-weekly\\n        emit SalaryPaid(salary);\\n    }\\n\\n    // Update performance score\\n    function updatePerformanceScore(uint256 _newScore) external onlyAuthorizedApp {\\n        performanceScore = _newScore;\\n        emit PerformanceScoreUpdated(_newScore);\\n    }\\n\\n    // Update performance threshold \\n    function updatePerformanceThreshold(uint256 _threshold) external onlyAuthorizedApp {\\n        performanceThreshold = _threshold;\\n        emit PerformanceThresholdUpdated(_threshold);\\n    }\\n\\n    // Extend employment termination date\\n    function extendTerminationDate(uint256 _newTerminationDate) external onlyAuthorizedApp {\\n        require(_newTerminationDate > terminationDate, \"New date must be after current termination date\");\\n        terminationDate = _newTerminationDate;\\n        emit TerminationDateUpdated(_newTerminationDate);\\n    }\\n\\n    // Update salary\\n    function updateSalary(uint256 _newSalary) external onlyAuthorizedApp {\\n        salary = _newSalary;\\n        emit SalaryUpdated(_newSalary);\\n    }\\n\\n    // Pay bonus\\n    function payBonus(uint256 _bonusAmount) external onlyAuthorizedApp nonReentrant {\\n        require(usdcToken.balanceOf(address(this)) >= _bonusAmount, \"Insufficient funds in contract\");\\n        usdcToken.transfer(employee, _bonusAmount);\\n        emit BonusPaid(_bonusAmount);\\n    }\\n\\n    // Terminate employment with mutual agreement or trigger dispute resolution if disagreement\\n    function terminateEmployment(bool employeePermission, bool employerPermission, bool employerFault) external onlyAuthorizedApp {\\n        if (employeePermission && employerPermission) {\\n            // If both parties agree, terminate employment and notify\\n            isEmployed = false;\\n            emit EmploymentTerminated(\"Employment terminated by mutual agreement.\");\\n        } else {\\n            // If there is no mutual agreement, determine who does not agree and resolve the dispute\\n            _resolveDispute(employerFault);\\n        }\\n    }\\n\\n    // Function to check contract balance (for employer's view)\\n    function checkContractBalance() external view returns (uint256) {\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    // Additional function to handle disputes and protect the salary buffer\\n    function _resolveDispute(bool employerFault) internal {\\n        uint256 contractBalance = usdcToken.balanceOf(address(this));\\n        address recipient = employerFault ? employee : employer;\\n        usdcToken.transfer(recipient, contractBalance);\\n\\n        isEmployed = false;\\n\\n        string memory resolutionMessage = employerFault \\n            ? \"Employer at fault, funds transferred to employee.\" \\n            : \"Employee at fault, funds transferred to employer.\";\\n        emit DisputeResolved(resolutionMessage);\\n        emit EmploymentTerminated(\"Employment terminated due to dispute resolution.\");\\n    }\\n\\n    // External interface for dispute resolution, callable by authorized app\\n    function resolveDispute(bool employerFault) external onlyAuthorizedApp {\\n        _resolveDispute(employerFault);\\n    }\\n}\\n",
        "legal_contract": "Full-Time Employment Agreement\\nParties:\\nThis Full-Time Employment Agreement (\"Agreement\") is entered into between:\\nInnovaTech Solutions Inc., a corporation organized and existing under the laws of California, with its principal place of business located at 789 Innovation Avenue, San Francisco, CA 94105 (hereinafter referred to as the \"Company\"),\\nand\\nEmily Rodriguez, an individual employed under the laws of California, with a residential address at 456 Elm Street, Los Angeles, CA 90001 (hereinafter referred to as the \"Employee\").\\nPosition and Duties:\\nThe Company hereby employs the Employee in the position of Senior Software Engineer on a full-time basis. The Employee agrees to design, develop, and maintain software applications, ensuring high performance and reliability.\\nTerm of Employment:\\nThe employment under this Agreement shall commence on June 1, 2026, and shall continue until terminated by either party in accordance with the terms herein. The initial term of employment shall be three years, terminating on May 31, 2029.\\nSalary:\\nThe Company agrees to pay the Employee a salary of $130,000 USD per annum. Salary payments will be made on a bi-weekly basis, with the first payment occurring on June 15, 2026. The Employee's salary will be subject to applicable withholdings and deductions. Payment to be made to employees USDC address: 0x20fa1822a87d4e7a3ccf20f86e716ef3772ecff1\\nBenefits:\\nIn addition to the salary, the Employee shall be entitled to participate in the Company's employee benefits program, including health insurance, dental coverage, and a 401(k) retirement savings plan with employer matching.\\nPerformance Review:\\nThe Employee's performance will be reviewed semi-annually by the Company's management team. Performance evaluations may result in salary increases, bonuses, or other forms of recognition for exceptional contributions.\\nTermination:\\nEither party may terminate this Agreement at any time, with or without cause, upon providing written notice to the other party. The notice period for termination shall be 30 days. Upon termination, the Employee shall be entitled to receive any accrued but unpaid salary up to the termination date.\\nConfidentiality:\\nThe Employee agrees to maintain strict confidentiality regarding all proprietary information of the Company, both during and after the term of employment.\\nGoverning Law:\\nThis Agreement shall be governed by and construed in accordance with the laws of the State of California.\\nEntire Agreement:\\nThis Agreement constitutes the entire understanding between the parties concerning the subject matter hereof and supersedes all prior agreements and understandings, whether written or oral.\\nIN WITNESS WHEREOF, the parties hereto have executed this Agreement as of the date first above written.\\nInnovaTech Solutions Inc.\\nBy: Adam Johnson\\nName: Adam Johnson\\nTitle: CEO\\nDate: June 1, 2026\\nEmily Rodriguez\\nBy: Emily Rodriguez\\nName: Emily Rodriguez\\nDate: June 1, 2026\\nTop of Form\\n"
    },
    {
        "smart_contract": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\"; // Interface for ERC20 tokens\\nimport \"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\"; // Prevent re-entrancy attacks\\n\\ncontract EmploymentContract is ReentrancyGuard {\\n    address public employer;\\n    address public employee = 0x7a5df878e195d09f1c0bbba702cfdf0ac9d0a835;\\n    address private authorizedApp; // Address of the authorized app to update metrics\\n    uint256 public salary = 8333; // Monthly salary amount in USDC\\n    IERC20 private usdcToken; // USDC token contract interface\\n    uint256 public startDate = 1709164800; // Unix timestamp of\tThu Feb 29 2024 00:00:00 GMT+0000 (Greenwich Mean Time)\\n    uint256 public terminationDate = 1740700800; // Unix timestamp of Fri Feb 28 2025 00:00:00 GMT+0000 (Greenwich Mean Time)\\n    uint256 public lastSalaryPaidDate; // Tracks last salary payment date\\n    uint256 public performanceScore = 0; // Performance score, updated by the authorized app\\n    uint256 public performanceThreshold = 0; \\n    bool public isEmployed = true; // Employment status\\n    string public salaryType = 'monthly'; // How often a salary payment to be initiated\\n    \\n    event SalaryUpdated(uint256 newSalary);\\n    event BonusPaid(uint256 bonusAmount);\\n    event EmploymentTerminated(string message);\\n    event DisputeResolved(string message);\\n    event SalaryPaid(uint256 amount);\\n    event PerformanceScoreUpdated(uint256 score);\\n    event PerformanceThresholdUpdated(uint256 threshold);\\n    event TerminationDateUpdated(uint256 newTerminationDate);\\n\\n    modifier onlyAuthorizedApp() {\\n        require(msg.sender == authorizedApp, \"Caller is not the authorized app\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _authorizedApp,\\n        address _usdcTokenAddress\\n    ) {\\n        employer = msg.sender; // The address deploying the contract is the employer\\n        authorizedApp = _authorizedApp;\\n        usdcToken = IERC20(_usdcTokenAddress);\\n        lastSalaryPaidDate = startDate; // Initialize with start date\\n    }\\n\\n    // Function to deposit USDC into the contract for salary payments\\n    function depositSalaryFunds(uint256 _amount) external nonReentrant {\\n        require(msg.sender == employer, \"Only the employer can deposit funds\");\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Function to automatically withdraw monthly salary funds from the employer\\n    function monthlyFunding() external onlyAuthorizedApp nonReentrant {\\n        uint256 amountNeeded = salary * 3; // Ensure buffer for 3 months\\n        uint256 currentBalance = usdcToken.balanceOf(address(this));\\n        uint256 shortfall = 0;\\n\\n        if (currentBalance < amountNeeded) {\\n            shortfall = amountNeeded - currentBalance;\\n            // Attempt to transfer the shortfall from the employer to the contract\\n            usdcToken.transferFrom(employer, address(this), shortfall);\\n        }\\n    }\\n\\n    // Automatically pay salary on a monthly basis\\n    function autoPaySalary() external onlyAuthorizedApp nonReentrant {\\n        require(isEmployed, \"Employment has ended\");\\n        require(block.timestamp >= lastSalaryPaidDate + 30 days, \"Salary already paid for this month\");\\n        require(usdcToken.balanceOf(address(this)) >= salary, \"Insufficient funds in contract\");\\n        require(performanceScore >= performanceThreshold, \"Performance score does not meet the required threshold. Employee is underperforming\");\\n\\n        lastSalaryPaidDate += 30 days; // Update last salary paid date to current month\\n        usdcToken.transfer(employee, salary);\\n        emit SalaryPaid(salary);\\n    }\\n\\n    // Update performance score\\n    function updatePerformanceScore(uint256 _newScore) external onlyAuthorizedApp {\\n        performanceScore = _newScore;\\n        emit PerformanceScoreUpdated(_newScore);\\n    }\\n\\n    // Update performance threshold \\n    function updatePerformanceThreshold(uint256 _threshold) external onlyAuthorizedApp {\\n        performanceThreshold = _threshold;\\n        emit PerformanceThresholdUpdated(_threshold);\\n    }\\n\\n    // Extend employment termination date\\n    function extendTerminationDate(uint256 _newTerminationDate) external onlyAuthorizedApp {\\n        require(_newTerminationDate > terminationDate, \"New date must be after current termination date\");\\n        terminationDate = _newTerminationDate;\\n        emit TerminationDateUpdated(_newTerminationDate);\\n    }\\n\\n    // Update salary\\n    function updateSalary(uint256 _newSalary) external onlyAuthorizedApp {\\n        salary = _newSalary;\\n        emit SalaryUpdated(_newSalary);\\n    }\\n\\n    // Pay bonus\\n    function payBonus(uint256 _bonusAmount) external onlyAuthorizedApp nonReentrant {\\n        require(usdcToken.balanceOf(address(this)) >= _bonusAmount, \"Insufficient funds in contract\");\\n        usdcToken.transfer(employee, _bonusAmount);\\n        emit BonusPaid(_bonusAmount);\\n    }\\n\\n    // Terminate employment with mutual agreement or trigger dispute resolution if disagreement\\n    function terminateEmployment(bool employeePermission, bool employerPermission, bool employerFault) external onlyAuthorizedApp {\\n        if (employeePermission && employerPermission) {\\n            // If both parties agree, terminate employment and notify\\n            isEmployed = false;\\n            emit EmploymentTerminated(\"Employment terminated by mutual agreement.\");\\n        } else {\\n            // If there is no mutual agreement, determine who does not agree and resolve the dispute\\n            _resolveDispute(employerFault);\\n        }\\n    }\\n\\n    // Function to check contract balance (for employer's view)\\n    function checkContractBalance() external view returns (uint256) {\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    // Additional function to handle disputes and protect the salary buffer\\n    function _resolveDispute(bool employerFault) internal {\\n        uint256 contractBalance = usdcToken.balanceOf(address(this));\\n        address recipient = employerFault ? employee : employer;\\n        usdcToken.transfer(recipient, contractBalance);\\n\\n        isEmployed = false;\\n\\n        string memory resolutionMessage = employerFault \\n            ? \"Employer at fault, funds transferred to employee.\" \\n            : \"Employee at fault, funds transferred to employer.\";\\n        emit DisputeResolved(resolutionMessage);\\n        emit EmploymentTerminated(\"Employment terminated due to dispute resolution.\");\\n    }\\n\\n    // External interface for dispute resolution, callable by authorized app\\n    function resolveDispute(bool employerFault) external onlyAuthorizedApp {\\n        _resolveDispute(employerFault);\\n    }\\n}\\n",
        "legal_contract": "Fixed-Term Employment Contract\\nBetween Acme Technologies Corp. (Hereinafter referred to as \"Employer\")\\nAnd John Smith Address: 123 Main Street, Anytown, USA (Hereinafter referred to as \"Employee\")\\nPosition and Duties The Employer hereby employs the Employee on a full-time basis as a Senior Software Engineer. The Employee agrees to perform the duties and responsibilities as required by the Employer faithfully and to the best of their ability.\\nTerm of Employment The employment under this contract shall commence on February 29, 2024, and shall terminate on February 28, 2025, unless earlier terminated in accordance with this contract.\\nSalary The Employer agrees to pay the Employee a salary of $100,000 USD per annum, payable monthly in USDC tokens to the Employee's designated wallet address 0x7a5df878e195d09f1c0bbba702cfdf0ac9d0a835. Payment will be made no later than the 5th day of each month.\\nPerformance Review The Employee's performance will be reviewed annually, and salary adjustments may be made at the discretion of the Employer based on performance metrics.\\nTermination Either party may terminate this contract before the expiry of the term by providing a 30-day written notice. Upon termination, the Employee will be entitled to receive the salary accrued up until the termination date.\\nConfidentiality The Employee shall maintain confidentiality during and after the term of employment regarding all proprietary information of the Employer.\\nGoverning Law This contract shall be governed by the laws of the jurisdiction where the Employer is located.\\nIN WITNESS WHEREOF, the parties hereto have executed this contract as of the last date written below.\\nEmployer Signature: ___________________ Date: _______________\\nEmployee Signature: ___________________ Date: ______________\\n"
    },
    {
        "smart_contract": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\"; // Interface for ERC20 tokens\\nimport \"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\"; // Prevent re-entrancy attacks\\n\\ncontract EmploymentContract is ReentrancyGuard {\\n    address public employer;\\n    address public employee = 0x1f4d70d81484c6cc6c5f78af41e54e80ae240ff5;\\n    address private authorizedApp; // Address of the authorized app to update metrics\\n    uint256 public salary = 7000; // Monthly salary amount in USDC\\n    IERC20 private usdcToken; // USDC token contract interface\\n    uint256 public startDate = 1773338858; // Unix timestamp of Thu Mar 12 2026 18:07:38 GMT+0000 (Greenwich Mean Time)\\n    uint256 public terminationDate = 2760282458; // Unix timestamp of Wed Jun 20 2057 18:07:38 GMT+0100 (British Summer Time)\\n    uint256 public lastSalaryPaidDate; // Tracks last salary payment date\\n    uint256 public performanceScore = 0; // Performance score, updated by the authorized app\\n    uint256 public performanceThreshold = 0; \\n    bool public isEmployed = true; // Employment status\\n    string public salaryType = 'weekly'; // How often a salary payment to be initiated\\n    \\n    event SalaryUpdated(uint256 newSalary);\\n    event BonusPaid(uint256 bonusAmount);\\n    event EmploymentTerminated(string message);\\n    event DisputeResolved(string message);\\n    event SalaryPaid(uint256 amount);\\n    event PerformanceScoreUpdated(uint256 score);\\n    event PerformanceThresholdUpdated(uint256 threshold);\\n    event TerminationDateUpdated(uint256 newTerminationDate);\\n\\n    modifier onlyAuthorizedApp() {\\n        require(msg.sender == authorizedApp, \"Caller is not the authorized app\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _authorizedApp,\\n        address _usdcTokenAddress\\n    ) {\\n        employer = msg.sender; // The address deploying the contract is the employer\\n        authorizedApp = _authorizedApp;\\n        usdcToken = IERC20(_usdcTokenAddress);\\n        lastSalaryPaidDate = startDate; // Initialize with start date\\n    }\\n\\n    // Function to deposit USDC into the contract for salary payments\\n    function depositSalaryFunds(uint256 _amount) external nonReentrant {\\n        require(msg.sender == employer, \"Only the employer can deposit funds\");\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Function to automatically withdraw monthly salary funds from the employer\\n    function monthlyFunding() external onlyAuthorizedApp nonReentrant {\\n        uint256 amountNeeded = salary * 3; // Ensure buffer for 3 months\\n        uint256 currentBalance = usdcToken.balanceOf(address(this));\\n        uint256 shortfall = 0;\\n\\n        if (currentBalance < amountNeeded) {\\n            shortfall = amountNeeded - currentBalance;\\n            // Attempt to transfer the shortfall from the employer to the contract\\n            usdcToken.transferFrom(employer, address(this), shortfall);\\n        }\\n    }\\n\\n    // Automatically pay salary on a monthly basis\\n    function autoPaySalary() external onlyAuthorizedApp nonReentrant {\\n        require(isEmployed, \"Employment has ended\");\\n        require(block.timestamp >= lastSalaryPaidDate + 7 days, \"Salary already paid for this period\");\\n        require(usdcToken.balanceOf(address(this)) >= salary, \"Insufficient funds in contract\");\\n        require(performanceScore >= performanceThreshold, \"Performance score does not meet the required threshold. Employee is underperforming\");\\n\\n        lastSalaryPaidDate += 7 days; // Update last salary paid date to current month\\n        usdcToken.transfer(employee, salary / 4.4); // Since there are 4.4 weeks in a months and the pay is bi-weekly\\n        emit SalaryPaid(salary);\\n    }\\n\\n    // Update performance score\\n    function updatePerformanceScore(uint256 _newScore) external onlyAuthorizedApp {\\n        performanceScore = _newScore;\\n        emit PerformanceScoreUpdated(_newScore);\\n    }\\n\\n    // Update performance threshold \\n    function updatePerformanceThreshold(uint256 _threshold) external onlyAuthorizedApp {\\n        performanceThreshold = _threshold;\\n        emit PerformanceThresholdUpdated(_threshold);\\n    }\\n\\n    // Extend employment termination date\\n    function extendTerminationDate(uint256 _newTerminationDate) external onlyAuthorizedApp {\\n        require(_newTerminationDate > terminationDate, \"New date must be after current termination date\");\\n        terminationDate = _newTerminationDate;\\n        emit TerminationDateUpdated(_newTerminationDate);\\n    }\\n\\n    // Update salary\\n    function updateSalary(uint256 _newSalary) external onlyAuthorizedApp {\\n        salary = _newSalary;\\n        emit SalaryUpdated(_newSalary);\\n    }\\n\\n    // Pay bonus\\n    function payBonus(uint256 _bonusAmount) external onlyAuthorizedApp nonReentrant {\\n        require(usdcToken.balanceOf(address(this)) >= _bonusAmount, \"Insufficient funds in contract\");\\n        usdcToken.transfer(employee, _bonusAmount);\\n        emit BonusPaid(_bonusAmount);\\n    }\\n\\n    // Terminate employment with mutual agreement or trigger dispute resolution if disagreement\\n    function terminateEmployment(bool employeePermission, bool employerPermission, bool employerFault) external onlyAuthorizedApp {\\n        if (employeePermission && employerPermission) {\\n            // If both parties agree, terminate employment and notify\\n            isEmployed = false;\\n            emit EmploymentTerminated(\"Employment terminated by mutual agreement.\");\\n        } else {\\n            // If there is no mutual agreement, determine who does not agree and resolve the dispute\\n            _resolveDispute(employerFault);\\n        }\\n    }\\n\\n    // Function to check contract balance (for employer's view)\\n    function checkContractBalance() external view returns (uint256) {\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    // Additional function to handle disputes and protect the salary buffer\\n    function _resolveDispute(bool employerFault) internal {\\n        uint256 contractBalance = usdcToken.balanceOf(address(this));\\n        address recipient = employerFault ? employee : employer;\\n        usdcToken.transfer(recipient, contractBalance);\\n\\n        isEmployed = false;\\n\\n        string memory resolutionMessage = employerFault \\n            ? \"Employer at fault, funds transferred to employee.\" \\n            : \"Employee at fault, funds transferred to employer.\";\\n        emit DisputeResolved(resolutionMessage);\\n        emit EmploymentTerminated(\"Employment terminated due to dispute resolution.\");\\n    }\\n\\n    // External interface for dispute resolution, callable by authorized app\\n    function resolveDispute(bool employerFault) external onlyAuthorizedApp {\\n        _resolveDispute(employerFault);\\n    }\\n}\\n",
        "legal_contract": "EMPLOYMENT CONTRACT\\nThis Employment Contract (the \"Contract\") is made effective as of 12.03.2026, by and between InnovateTech Solutions Inc., a corporation organized and existing under the laws of the State of California, with its principal office located at 123 Innovation Street, Tech City, CA 54321 (\"Company\"), and Michael Davis, (\"Employee\").\\nPOSITION AND DUTIES The Company hereby agrees to employ the Employee in the position of Marketing Manager. The Employee agrees to perform the duties and responsibilities assigned by the Company faithfully and to the best of their ability.\\nTERM OF EMPLOYMENT The term of employment shall commence on 12.03.2026 and shall terminate on 20.06.2057, unless otherwise terminated in accordance with the provisions of this Contract. The employee is employed on a full-time basis.\\nSALARY The Company shall pay the Employee a monthly salary of $7,000 USD, payable on a weekly basis in USDC to the Employee's wallet address as follows: 0x1f4d70d81484c6cc6c5f78af41e54e80ae240ff5. Payment shall be made on the last business day of each month.\\nCONFIDENTIALITY The Employee agrees to keep all proprietary information of the Company confidential and not to disclose it to any third parties during and after the term of their employment.\\nGOVERNING LAW This Contract shall be governed by and construed in accordance with the laws of the State of California.\\nIN WITNESS WHEREOF, the Parties have executed this Employment Contract as of the date first above written.\\nCOMPANY: By: [Authorized Signatory] Name: [Name of Authorized Company Representative] Title: [Title of Authorized Company Representative]\\nEMPLOYEE: Signature: ____________________________ Name: Michael Davis\\nTop of Form\\n"
    },
    {
        "smart_contract": "// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\"; // Interface for ERC20 tokens\\nimport \"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\"; // Prevent re-entrancy attacks\\n\\ncontract EmploymentContract is ReentrancyGuard {\\n    address public employer;\\n    address public employee = 0x3cf4cb6ce8cf3b147e6c444cf66526f5f0c16b92;\\n    address private authorizedApp; // Address of the authorized app to update metrics\\n    uint256 public salary = 9000; // Monthly salary amount in USDC\\n    IERC20 private usdcToken; // USDC token contract interface\\n    uint256 public startDate = 3803044058; // Unix timestamp of Thu Jul 06 2090 18:07:38 GMT+0100 (British Summer Time)\\n    uint256 public terminationDate = 5065088858; // Unix timestamp of Tue Jul 04 2130 18:07:38 GMT+0100 (British Summer Time)\\n    uint256 public lastSalaryPaidDate; // Tracks last salary payment date\\n    uint256 public performanceScore = 0; // Performance score, updated by the authorized app\\n    uint256 public performanceThreshold = 0; \\n    bool public isEmployed = true; // Employment status\\n    string public salaryType = 'bi-weekly'; // How often a salary payment to be initiated\\n    \\n    event SalaryUpdated(uint256 newSalary);\\n    event BonusPaid(uint256 bonusAmount);\\n    event EmploymentTerminated(string message);\\n    event DisputeResolved(string message);\\n    event SalaryPaid(uint256 amount);\\n    event PerformanceScoreUpdated(uint256 score);\\n    event PerformanceThresholdUpdated(uint256 threshold);\\n    event TerminationDateUpdated(uint256 newTerminationDate);\\n\\n    modifier onlyAuthorizedApp() {\\n        require(msg.sender == authorizedApp, \"Caller is not the authorized app\");\\n        _;\\n    }\\n\\n    constructor(\\n        address _authorizedApp,\\n        address _usdcTokenAddress\\n    ) {\\n        employer = msg.sender; // The address deploying the contract is the employer\\n        authorizedApp = _authorizedApp;\\n        usdcToken = IERC20(_usdcTokenAddress);\\n        lastSalaryPaidDate = startDate; // Initialize with start date\\n    }\\n\\n    // Function to deposit USDC into the contract for salary payments\\n    function depositSalaryFunds(uint256 _amount) external nonReentrant {\\n        require(msg.sender == employer, \"Only the employer can deposit funds\");\\n        usdcToken.transferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    // Function to automatically withdraw monthly salary funds from the employer\\n    function monthlyFunding() external onlyAuthorizedApp nonReentrant {\\n        uint256 amountNeeded = salary * 3; // Ensure buffer for 3 months\\n        uint256 currentBalance = usdcToken.balanceOf(address(this));\\n        uint256 shortfall = 0;\\n\\n        if (currentBalance < amountNeeded) {\\n            shortfall = amountNeeded - currentBalance;\\n            // Attempt to transfer the shortfall from the employer to the contract\\n            usdcToken.transferFrom(employer, address(this), shortfall);\\n        }\\n    }\\n\\n    // Automatically pay salary on a monthly basis\\n    function autoPaySalary() external onlyAuthorizedApp nonReentrant {\\n        require(isEmployed, \"Employment has ended\");\\n        require(block.timestamp >= lastSalaryPaidDate + 14 days, \"Salary already paid for this period\");\\n        require(usdcToken.balanceOf(address(this)) >= salary, \"Insufficient funds in contract\");\\n        require(performanceScore >= performanceThreshold, \"Performance score does not meet the required threshold. Employee is underperforming\");\\n\\n        lastSalaryPaidDate += 14 days; // Update last salary paid date to current month\\n        usdcToken.transfer(employee, salary / 2.2); // Since there are 4.4 weeks in a months and the pay is bi-weekly\\n        emit SalaryPaid(salary);\\n    }\\n\\n    // Update performance score\\n    function updatePerformanceScore(uint256 _newScore) external onlyAuthorizedApp {\\n        performanceScore = _newScore;\\n        emit PerformanceScoreUpdated(_newScore);\\n    }\\n\\n    // Update performance threshold \\n    function updatePerformanceThreshold(uint256 _threshold) external onlyAuthorizedApp {\\n        performanceThreshold = _threshold;\\n        emit PerformanceThresholdUpdated(_threshold);\\n    }\\n\\n    // Extend employment termination date\\n    function extendTerminationDate(uint256 _newTerminationDate) external onlyAuthorizedApp {\\n        require(_newTerminationDate > terminationDate, \"New date must be after current termination date\");\\n        terminationDate = _newTerminationDate;\\n        emit TerminationDateUpdated(_newTerminationDate);\\n    }\\n\\n    // Update salary\\n    function updateSalary(uint256 _newSalary) external onlyAuthorizedApp {\\n        salary = _newSalary;\\n        emit SalaryUpdated(_newSalary);\\n    }\\n\\n    // Pay bonus\\n    function payBonus(uint256 _bonusAmount) external onlyAuthorizedApp nonReentrant {\\n        require(usdcToken.balanceOf(address(this)) >= _bonusAmount, \"Insufficient funds in contract\");\\n        usdcToken.transfer(employee, _bonusAmount);\\n        emit BonusPaid(_bonusAmount);\\n    }\\n\\n    // Terminate employment with mutual agreement or trigger dispute resolution if disagreement\\n    function terminateEmployment(bool employeePermission, bool employerPermission, bool employerFault) external onlyAuthorizedApp {\\n        if (employeePermission && employerPermission) {\\n            // If both parties agree, terminate employment and notify\\n            isEmployed = false;\\n            emit EmploymentTerminated(\"Employment terminated by mutual agreement.\");\\n        } else {\\n            // If there is no mutual agreement, determine who does not agree and resolve the dispute\\n            _resolveDispute(employerFault);\\n        }\\n    }\\n\\n    // Function to check contract balance (for employer's view)\\n    function checkContractBalance() external view returns (uint256) {\\n        return usdcToken.balanceOf(address(this));\\n    }\\n\\n    // Additional function to handle disputes and protect the salary buffer\\n    function _resolveDispute(bool employerFault) internal {\\n        uint256 contractBalance = usdcToken.balanceOf(address(this));\\n        address recipient = employerFault ? employee : employer;\\n        usdcToken.transfer(recipient, contractBalance);\\n\\n        isEmployed = false;\\n\\n        string memory resolutionMessage = employerFault \\n            ? \"Employer at fault, funds transferred to employee.\" \\n            : \"Employee at fault, funds transferred to employer.\";\\n        emit DisputeResolved(resolutionMessage);\\n        emit EmploymentTerminated(\"Employment terminated due to dispute resolution.\");\\n    }\\n\\n    // External interface for dispute resolution, callable by authorized app\\n    function resolveDispute(bool employerFault) external onlyAuthorizedApp {\\n        _resolveDispute(employerFault);\\n    }\\n}\\n",
        "legal_contract": "EMPLOYMENT CONTRACT\\nThis Employment Contract (the \"Contract\") is made effective as of 06.07.2090, by and between NextWave Technologies Inc., a corporation organized and existing under the laws of the State of California, with its principal office located at 456 Tech Avenue, Tech City, CA 54321 (\"Company\"), and Emily Adams, (\"Employee\").\\nPOSITION AND DUTIES The Company hereby agrees to employ the Employee in the position of Senior Data Scientist. The Employee agrees to perform the duties and responsibilities assigned by the Company faithfully and to the best of their ability.\\nTERM OF EMPLOYMENT The term of employment shall commence on 06.07.2090 and shall terminate on 04.07.2130, unless otherwise terminated in accordance with the provisions of this Contract. The employee is employed on a full-time basis.\\nSALARY The Company shall pay the Employee a monthly salary of $9,000 USD, payable on a bi-weekly basis in USDC to the Employee's wallet address as follows: 0x3cf4cb6ce8cf3b147e6c444cf66526f5f0c16b92. Payment shall be made on the last business day of each month.\\nCONFIDENTIALITY The Employee agrees to keep all proprietary information of the Company confidential and not to disclose it to any third parties during and after the term of their employment.\\nGOVERNING LAW This Contract shall be governed by and construed in accordance with the laws of the State of California.\\nIN WITNESS WHEREOF, the Parties have executed this Employment Contract as of the date first above written.\\nCOMPANY: By: [Authorized Signatory] Name: [Name of Authorized Company Representative] Title: [Title of Authorized Company Representative]\\nEMPLOYEE: Signature: ____________________________ Name: Emily Adams\\nTop of Form\\n"
    },
]